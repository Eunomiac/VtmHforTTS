local H = require("huicontrol")
local G = require("guids")
local U = require("utilities")
local C = require("constants")

local Z = {}




function getZone(zoneID) return getObjectFromGUID(zoneID) end


function Z.logObjects(zoneID)
  log(U.map(getZone(zoneID).getObjects(), function(obj) return obj.type end))
end

function Z.getCardSpots(zoneGuid)
  local zone = getZone(zoneGuid)
  return U.filter(zone.getObjects(), function(obj) return obj.type == "Block" and string.find(obj.getName(), "Leader") end)
end

function getCardSpot(zoneGuid) return Z.getCardSpots(zoneGuid)[1] end

function Z.isPlayerCardZone(zoneGuid)
  for _, colorData in pairs(G.playerSpaces) do
    for _, zoneRows in pairs(colorData.zones.bloodline) do
      for _, zoneID in pairs(zoneRows) do
        if zoneID == zoneGuid then return true end
      end
    end
  end
  return false
end

function Z.hasCard(zoneGuid)
  return Z.getCard(zoneGuid) != false
end

isShowingScores = false

function Z.toggleScoresOverlay(isShowing)
  if isShowing == nil then
    isShowingScores = not isShowingScores
  else
    isShowingScores = isShowing
  end
  Z.refreshOverlays()
end

function Z.getCard(zoneGuid)
  local zone = getZone(zoneGuid)
  -- log(zone.getObjects())
  local cardObjs = U.filter(zone.getObjects(), function(obj) return obj.type == "Card" end)
  if (#cardObjs == 0) then return false end
  if (#cardObjs > 1) then
    -- Tzimisce craft monstrosity or Brujah Enemy could be this: Gotta handle them!
    return cardObjs[1]
  end
  return cardObjs[1]
end

function Z.getDeck(zoneGuid)
  local zone = getZone(zoneGuid)
  -- log(zone.getObjects())
  local deckObjs = U.filter(zone.getObjects(), function(obj) return obj.type == "Deck" end)
  if (#deckObjs == 0) then return false end
  if (#deckObjs > 1) then
    -- Tzimisce craft monstrosity or Brujah Enemy could be this: Gotta handle them!
    return deckObjs[1]
  end
  return deckObjs[1]
end

function Z.alignCard(zoneGuid)
  -- if not Z.hasCard(zoneGuid) then return end
  local zone = getZone(zoneGuid)
  local cardSpot = getCardSpot(zoneGuid)
  local card = Z.getCard(zoneGuid)
  if (zone and cardSpot and card) then
    card.setRotationSmooth({
      x = 0,
      y = U.pAngle(card.getRotation().y, 180),
      z = U.pAngle(card.getRotation().z, 180)
    })
    card.setPositionSmooth({
      x = cardSpot.getPosition().x,
      y = cardSpot.getPosition().y + 0.02,
      z = cardSpot.getPosition().z
    })
  end
end

function Z.isClanLeader(zoneGuid)
  local card = Z.getCard(zoneGuid)
  if not card then return false end
  return card.hasTag("ClanLeader")
end

function Z.isTorpored(zoneGuid)
  local zone = getZone(zoneGuid)
  if (Z.getCard(zoneGuid)) then
    local torpTokens = U.filter(zone.getObjects(), function(obj) return string.find(obj.getName(), "Torpor") end)
    if (#torpTokens == 0) then return false end
    for _, tTok in pairs(torpTokens) do
      if (U.isFlipped(tTok)) then return true end
    end
  end
  return false
end

function Z.isExhausted(zoneGuid)
  local zone = getZone(zoneGuid)
  if (Z.getCard(zoneGuid)) then
    local torpTokens = U.filter(zone.getObjects(), function(obj) return string.find(obj.getName(), "Torpor") end)
    if (#torpTokens == 0) then return false end
    for _, tTok in pairs(torpTokens) do
      if not U.isFlipped(tTok) then return true end
    end
  end
  return false
end

function Z.countPower(zoneGuid, isIncludingTorpored)
  local zone = getZone(zoneGuid)
  if not Z.getCard(zoneGuid) then return 0 end
  if Z.isTorpored(zoneGuid) and not isIncludingTorpored then return 0 end
  return #U.filter(zone.getObjects(), function(obj) return string.find(obj.getName(), "Power") end)
end

function Z.countInfamy(zoneGuid, isIncludingTorpored)
  local gameState = Global.getTable("gameState")
  local isVictoryCount = gameState.round == 10
  local zone = getZone(zoneGuid)
  if not Z.getCard(zoneGuid) then return 0 end
  if Z.isTorpored(zoneGuid) and not isIncludingTorpored then return 0 end
  if string.find(Z.getCard(zoneGuid).getDescription(), "IgnoreInfamyVP") and isVictoryCount then return 0 end
  return #U.filter(zone.getObjects(), function(obj) return string.find(obj.getName(), "Infamy") end)
end

function Z.countBoons(zoneGuid, isIncludingTorpored)
  local zone = getZone(zoneGuid)
  if not Z.getCard(zoneGuid) then return 0 end
  if Z.isTorpored(zoneGuid) and not isIncludingTorpored then return 0 end
  return #U.filter(zone.getObjects(), function(obj) return string.find(obj.getName(), "Boon") end)
end

function Z.getScore(zoneGuid)
  local zone = getZone(zoneGuid)
  if not (Z.getCard(zoneGuid)) then return 0 end
  if (Z.isTorpored(zoneGuid)) then return 0 end
  return Z.countPower(zoneGuid) + Z.countBoons(zoneGuid) - Z.countInfamy(zoneGuid)
end

function Z.refreshOverlays()
  for _, color in pairs(C.Colors) do
    local guidData = G.playerSpaces[color].zones.bloodline
    for _, zoneRows in pairs(guidData) do
      for _, zoneID in pairs(zoneRows) do
        Z.syncCard(zoneID)
      end
    end
  end
end
local zone = getZone(zoneGuid)
function Z.getBloodlineData(color)
  local bloodlineData = {}
  local guidData = G.playerSpaces[color].zones.bloodline
  for _, zoneRows in pairs(guidData) do
    for _, zoneID in pairs(zoneRows) do
      -- Z.syncCard(zoneID)
      if Z.hasCard(zoneID) then
        local cardData = {
          player = color,
          zoneID = zoneID,
          cardObj = Z.getCard(zoneID),
          power = Z.countPower(zoneID),
          infamy = Z.countInfamy(zoneID),
          boons = Z.countBoons(zoneID),
          overlays = {
            torpor = Z.isTorpored(zoneID),
            exhausted = Z.isExhausted(zoneID),
            enemy = false,
            monstrosity = false
          }
        }
        table.insert(bloodlineData, cardData)
      end
    end
  end
  return bloodlineData
end

function Z.getAllCards()
  local cardsData = {}
  for _, color in pairs(C.Colors) do
    cardsData = U.concat(cardsData, Z.getBloodlineData(color))
  end
  return cardsData
end

function Z.getMaxInfamyCards()
  local validChars = U.filter(Z.getAllCards(), function(cardData) return not cardData.overlays.torpor end)
  local maxInfamy = 0
  local cardsAtMax = {}
  for _, cardData in pairs(validChars) do
    if (cardData.infamy > maxInfamy) then
      maxInfamy = cardData.infamy
      cardsAtMax = {cardData.cardObj}
    elseif (cardData.infamy == maxInfamy) then
      table.insert(cardsAtMax, cardData.cardObj)
    end
  end
  return cardsAtMax
end

local isCheckingSuspicion = false

function Z.checkSuspicion()
  isCheckingSuspicion = true
  Z.scoreBloodline("Red")
  Z.scoreBloodline("Yellow")
  Z.scoreBloodline("Blue")
end

function Z.hideSuspicion()
  isCheckingSuspicion = false
  Z.scoreBloodline("Red")
  Z.scoreBloodline("Yellow")
  Z.scoreBloodline("Blue")
end

function Z.scoreBloodline(color)
  local guidData = G.playerSpaces[color].zones.bloodline
  local scoreTotal = 0
  for _, zoneRows in pairs(guidData) do
    for _, zoneID in pairs(zoneRows) do
      Z.syncCard(zoneID)
      scoreTotal = scoreTotal + Z.getScore(zoneID)
    end
  end
  return scoreTotal
end

local XML = {
  ExhaustionOverlay = function(zoneID)
    if (Z.isExhausted(zoneID) and not Z.isTorpored(zoneID)) then return "true" end
    return "false"
  end,
  TorporOverlay = function(zoneID)
    if (Z.isTorpored(zoneID)) then return "true" end
    return "false"
  end,
  SuspicionOverlay = function(zoneID)
    if not isCheckingSuspicion or not Z.hasCard(zoneID) or Z.isTorpored(zoneID) then return "false" end
    local maxCards = U.map(Z.getMaxInfamyCards(), function(card) return card.guid end)
    local thisCard = Z.getCard(zoneID).guid
    if U.isIn(thisCard, maxCards) then return "true" end
    return "false"
  end,
  EnemyOverlay = function(zoneID)
    return "false"
    -- if (Z.isTorpored(zoneID)) then return "true" end
    -- return "false"
  end,
  MonstrosityOverlay = function(zoneID)
    return "false"
    -- if (Z.isTorpored(zoneID)) then return "true" end
    -- return "false"
  end
}

local zoneThrottle = {}

function Z.syncCard(zoneGuid)
  if zoneThrottle[zoneGuid] then return end
  zoneThrottle[zoneGuid] = true
  Wait.time(function() zoneThrottle[zoneGuid] = nil end, 0.5)
  Wait.time(function() Z.alignCard(zoneGuid) end, 0.25)

  local gameState = Global.getTable("gameState")
  local round = gameState.round
  local zone = getZone(zoneGuid)
  if Z.hasCard(zoneGuid) then
    -- broadcastToColor("Syncing Card", "Red", "Yellow")
    local card = Z.getCard(zoneGuid)
    Wait.time(function() Z.alignCard(zoneGuid) end, 0.25)
    if round == 0 then return end
    local overlayPanelColor = "clear"
    local isExhaustionActive = XML.ExhaustionOverlay(zoneGuid)
    local isSuspicionActive = "false"
    if isCheckingSuspicion then
      isSuspicionActive = XML.SuspicionOverlay(zoneGuid)
      if isSuspicionActive == "true" then
        card.highlightOn("White")
        isExhaustionActive = "false"
      else
        card.highlightOff()
        if isCheckingSuspicion then
          overlayPanelColor = "rgba(0, 0, 0, 0.98)"
          isExhaustionActive = "false"
        end
      end
    else
      card.highlightOff()
    end


    local XMLData = {
      { tag = "Panel",
        attributes = {class = "overlay",
          height = "100",
          padding = "0 0 0 0",
          position = "0 0 15",
          rotation = "0 0 0",
          spacing = "0",
          width = "100",
          color = overlayPanelColor},
        children = {
          { tag = "Image",
            attributes = {class = "torpor-overlay",
              image = "overlay-torpor",
              color = "rgba(1,1,1,0.95)",
              active = XML.TorporOverlay(zoneGuid)
            },
            children = {} },
          { tag = "Image",
            attributes = {class = "exhaustion-overlay",
              image = "overlay-exhaustion",
              color = "rgba(1,1,1,0.95)",
              active = isExhaustionActive
            },
            children = {} },
          { tag = "Image",
            attributes = {class = "suspicious-overlay",
              -- image = "overlay-exhaustion",
              -- color = "rgba(1,1,0,0.95)",
              image = "overlay-suspicion",
              active = isSuspicionActive
            },
            children = {} },
          { tag = "Image",
            attributes = {class = "enemy-overlay",
              image = "overlay-enemy",
              active = XML.EnemyOverlay(zoneGuid)
            },
            children = {} },
          { tag = "Image",
            attributes = {class = "monstrosity-overlay",
              image = "overlay-monstrosity",
              active = XML.MonstrosityOverlay(zoneGuid)
            },
            children = {} }
        } }
      }

    if isShowingScores then

      local infamyValue = Z.countInfamy(zoneGuid)
      local powerValue = Z.countPower(zoneGuid)
      local boonsValue = Z.countBoons(zoneGuid)
      local totalValue = powerValue + boonsValue - infamyValue

      if infamyValue == 0 then infamyValue = "" else infamyValue = "-" .. infamyValue end
      if powerValue == 0 then powerValue = "" end
      if boonsValue == 0 then boonsValue = "" end
      if infamyValue == "" and powerValue == "" and boonsValue == "" then totalValue = "~" end

      table.insert(XMLData, { tag = "Panel",
        attributes = {class = "main",
          height = "150",
          padding = "0 0 0 0",
          pivot = "0.5 0",
          position = "0 5 -50",
          rotation = "-70 0 0",
          spacing = "1",
          width = "80",
          active = totalValue != "",
          color = "rgba(0, 0, 0, 0.5)",
          childForceExpandHeight="true",
          childForceExpandWidth="true"},
        children = {
          { tag = "Panel",
            attributes = {
              class = "powerPanel",
              height = "40%",
              rectAlignment = "UpperLeft",
              width = "25%",
              offsetXY="15 0",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = powerValue,
                attributes = {
                  rectAlignment = "UpperRight",
                  height = "33%",
                  class = "powerCount",
                  -- scale = "0.75",
                  color = "#FF0000",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#660000",
                  id = "powerCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          },
          { tag = "Panel",
            attributes = {
              class = "boonPanel",
              height = "40%",
              rectAlignment = "UpperCenter",
              width = "25%",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = boonsValue,
                attributes = {
                  rectAlignment = "UpperCenter",
                  height = "33%",
                  class = "boonCount",
                  -- scale = "0.75",
                  color = "#990000",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#999999",
                  id = "boonCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          },
          { tag = "Panel",
            attributes = {
              class = "infamyPanel",
              height = "40%",
              rectAlignment = "UpperRight",
              width = "50%",
              offsetXY="-15 0",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = infamyValue,
                attributes = {
                  rectAlignment = "UpperLeft",
                  height = "33%",
                  class = "infamyCount",
                  -- scale = "0.75",
                  color = "#FFFF00",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#555500",
                  id = "infamyCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          }
          -- { tag = "Panel",
          --   attributes = {
          --     class = "totalPanel",
          --     height = "33%",
          --     rectAlignment = "LowerCenter",
          --     width = "100%",
          --     flexibleWidth="0",
          --     flexibleHeight="0",
          --     childForceExpandWidth="false",
          --     childForceExpandHeight="false"},
          --   children = {
          --     { tag = "Text",
          --       value = totalValue,
          --         attributes = {
          --           id="totalCount",
          --           class = "totalCount",
          --           color = "#FFFFFF",
          --           fontSize = "40",
          --           fontStyle = "Bold",
          --           outline = "#FF0000",
          --           flexibleHeight="0",
          --           flexibleWidth="0"
          --         },
          --       children = {} }
          --   }
          -- }
        }
        })
    end

    zone.UI.setXmlTable(XMLData)
  else
    zone.UI.setXmlTable({{tag = "Panel", attributes = {}, children = {}}})
  end
end

return Z
