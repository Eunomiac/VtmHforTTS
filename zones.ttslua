local M = require("main")
local G = require("guids")
local U = require("utilities")
local C = require("constants")
local BGE = require("bgE")

local Z = {}
local isShowingScores = false

local function parseBool(bool) if bool then return "true" else return "false" end end


-- local function getZone(zoneID) return getObjectFromGUID(zoneID) end
-- local function getCardSpot(zoneGuid) return Z.getCardSpots(zoneGuid)[1] end


-- function Z.logObjects(zoneID)
--   log(U.map(getZone(zoneID).getObjects(), function(obj) return obj.type end))
-- end

-- function Z.getCardSpots(zoneGuid)
--   local zone = getZone(zoneGuid)
--   return U.filter(zone.getObjects(), function(obj) return obj.type == "Block" and string.find(obj.getName(), "Leader") end)
-- end
function Z.getPlayerZones(color)
	if color == nil then
		return U.map(G.zones.allPlayer, function(zoneID) return getObjectFromGUID(zoneID) end)
	else
		return U.map(G.zones[color].all, function(zoneID) return getObjectFromGUID(zoneID) end)
	end
end

-- *** Zone Type Checking ***
function Z.isPlayerCardZone(zone) return U.isIn(zone.guid, G.zones.allPlayer) end
function Z.isTokenClearZone(zone) return U.isIn(zone.guid, G.zones.clearZones) end

-- *** Zone Object Retrieval ***
function Z.getZoneObjects(zone, objType)
	return U.filter(zone.getObjects(true), function (obj) return obj.type == objType end)
end
function Z.getTaggedZoneObjects(zone, tags, requireAll)
	local zoneObjs = zone.getObjects()
	if type(tags) == "string" then return U.filter(zoneObjs, function(obj) return obj.hasTag(tags) end) end
	if requireAll == true then
		return U.filter(zoneObjs, function(obj)
			for _, tag in pairs(tags) do
				if not obj.hasTag(tag) then return false end
			end
			return true
		end
		)
	else
		return U.filter(zoneObjs, function(obj)
			for _, tag in pairs(tags) do
				if obj.hasTag(tag) then return true end
			end
			return false
		end
		)
	end
end

function Z.getCard(zone) return Z.getZoneObjects(zone, "Card")[1] end
function Z.hasCard(zone) return Z.getCard(zone) ~= nil end

function Z.getDeck(zone) return Z.getZoneObjects(zone, "Deck")[1] end

function Z.getClanLeader(color)
	local leaderZone = getObjectFromGUID(G.zones[color].bloodline[1][1])
	return Z.getCard(leaderZone)
end

function Z.getAnkhs(zone, dir)
	return Z.getTaggedZoneObjects(zone, {"Ankh", dir}, true)
end

function Z.getPowerTokens(zone) return Z.getTaggedZoneObjects(zone, "Power") end
function Z.getInfamyTokens(zone) return Z.getTaggedZoneObjects(zone, "Power") end
function Z.getBoons(zone) return Z.getTaggedZoneObjects(zone, "Boon") end
local function getExhaustionTorporTokens(zone) return Z.getTaggedZoneObjects(zone, "ExhaustTorpor") end
function Z.getExhaustionTokens(zone)
	return U.filter(getExhaustionTorporTokens(zone), function(token) return not U.isFlipped(token) end)
end
function Z.getTorporTokens(zone)
	return U.filter(getExhaustionTorporTokens(zone), function(token) return U.isFlipped(token) end)
end

function Z.isTorpored(zone) return Z.isPlayerCardZone(zone) and Z.hasCard(zone) and #Z.getTorporTokens(zone) > 0 end
function Z.isExhausted(zone) return Z.isPlayerCardZone(zone) and Z.hasCard(zone) and #Z.getExhaustionTokens(zone) > 0 end

function Z.countPower(zone, isCountingTorpored)
	if Z.isPlayerCardZone(zone) and Z.hasCard(zone) then
		if not isCountingTorpored or not Z.isTorpored(zone) then
			return #Z.getPowerTokens(zone)
		end
	end
	return 0
end
function Z.countInfamy(zone, isCountingTorpored)
	if Z.isPlayerCardZone(zone) and Z.hasCard(zone) then
		if not isCountingTorpored or not Z.isTorpored(zone) then
			if string.find(Z.getCard(zone).getDescription(), "IgnoreInfamyVP") then
				local gameState = Global.getTable("gameState")
				if gameState.round == 10 then return 0 end
			end
			return #Z.getInfamyTokens(zone)
		end
	end
	return 0
end
function Z.countBoons(zone, isCountingTorpored)
	if Z.isPlayerCardZone(zone) and Z.hasCard(zone) then
		if not isCountingTorpored or not Z.isTorpored(zone) then
			return #Z.getBoons(zone)
		end
	end
	return 0
end

function Z.scoreZone(zone) return Z.countPower(zone) + Z.countBoons(zone) - Z.countInfamy(zone) end

function Z.scoreBloodline(color)
	local scoreTotal = 0
	for _, zone in pairs(Z.getPlayerZones(color)) do
		scoreTotal = scoreTotal + Z.scoreZone(zone)
	end
	return scoreTotal
end

function Z.toggleScoresOverlay(isShowing)
  if isShowing == nil then
    isShowingScores = not isShowingScores
  else
    isShowingScores = isShowing
  end
  Z.refreshOverlays()
end

function Z.refreshOverlays()
	for _, zone in pairs(Z.getPlayerZones()) do
		if Z.hasCard(zone) then
			Z.syncCard(zone)
		else
			zone.UI.setXmlTable({{tag = "Panel", attributes = {}, children = {}}})
		end
	end
end


local maxInfamy = 0
function Z.refreshMaxInfamy()
	maxInfamy = 0
	for _, zone in pairs(Z.getPlayerZones()) do
		local infamyCount = Z.countInfamy(zone)
		if infamyCount > maxInfamy then
			maxInfamy = infamyCount
		end
	end
end

local isCheckingSuspicion = false
function Z.checkSuspicion()
  isCheckingSuspicion = true
	Z.refreshMaxInfamy()
	Z.refreshOverlays()
end

function Z.hideSuspicion()
  isCheckingSuspicion = false
	maxInfamy = 0
	Z.refreshOverlays()
end




local XML = {
  ExhaustionOverlay = function(zoneID)
    if (Z.isExhausted(zoneID) and not Z.isTorpored(zoneID)) then return "true" end
    return "false"
  end,
  TorporOverlay = function(zoneID)
    if (Z.isTorpored(zoneID)) then return "true" end
    return "false"
  end,
  SuspicionOverlay = function(zoneID)
    if not isCheckingSuspicion or not Z.hasCard(zoneID) or Z.isTorpored(zoneID) then return "false" end
    local maxCards = U.map(Z.getMaxInfamyCards(), function(card) return card.guid end)
    local thisCard = Z.getCard(zoneID).guid
    if U.isIn(thisCard, maxCards) then return "true" end
    return "false"
  end,
  EnemyOverlay = function(zoneID)
    return "false"
    -- if (Z.isTorpored(zoneID)) then return "true" end
    -- return "false"
  end,
  MonstrosityOverlay = function(zoneID)
    return "false"
    -- if (Z.isTorpored(zoneID)) then return "true" end
    -- return "false"
  end
}

function Z.alignCard(zone)
	local zonePos = zone.getPosition()
  local card = Z.getCard(zone)
  if (card) then
		local cardRot = card.getRotation()
    card.setRotationSmooth({
      x = 0,
      y = U.pAngle(cardRot.y, 180),
      z = U.pAngle(cardRot.z, 180)
    })
    card.setPositionSmooth({
      x = zonePos.x,
      y = -0.11,
      z = zonePos.z
    })
  end
end

function Z.clearOverlay(zone)
	zone.UI.setXmlTable({{tag = "Panel", attributes = {}, children = {}}})
end



local zoneThrottle = {}

function Z.syncCard(zone)
  if zoneThrottle[zone.guid] then return end
	if not Z.hasCard(zone) then return Z.clearOverlay(zone) end

	zoneThrottle[zone.guid] = true
  Wait.time(function() zoneThrottle[zone] = nil end, 1)
  Wait.time(function() Z.alignCard(zone) end, 0.25)

  local gameState = Global.getTable("gameState")
  if gameState.round == 0 then return Z.clearOverlay(zone) end

  local overlayPanelColor = "clear"

	local overlayStatus = {}
	overlayStatus.torpor = Z.isTorpored(zone)
	if (overlayStatus.torpor) then
		Z.burnAnkhs(zone)
	end
	-- if vamp is torpored and has ankhs on it, burn those ankhs via BGE
	overlayStatus.suspicion = isCheckingSuspicion and Z.countInfamy(zone) == maxInfamy
	overlayStatus.exhaustion = not isCheckingSuspicion and not overlayStatus.torpor and gameState.round < 10 and Z.isExhausted(zone)

  local card = Z.getCard(zone)
	if isCheckingSuspicion then
		if overlayStatus.suspicion then
			card.highlightOn("White")
		else
			overlayPanelColor = "rgba(0, 0, 0, 0.98)"
		end
	else
		card.highlightOff()
	end

	local XMLData = {
		{ tag = "Panel",
			attributes = {class = "overlay",
				height = "100",
				padding = "0 0 0 0",
				position = "0 0 15",
				rotation = "0 0 0",
				spacing = "0",
				width = "100",
				color = overlayPanelColor},
			children = {
				{ tag = "Image",
					attributes = {class = "torpor-overlay",
						image = "overlay-torpor",
						color = "rgba(1,1,1,0.95)",
						active = parseBool(overlayStatus.torpor)
					},
					children = {} },
				{ tag = "Image",
					attributes = {class = "exhaustion-overlay",
						image = "overlay-exhaustion",
						color = "rgba(1,1,1,0.95)",
						active = parseBool(overlayStatus.exhaustion)
					},
					children = {} },
				{ tag = "Image",
					attributes = {class = "suspicious-overlay",
						-- image = "overlay-exhaustion",
						-- color = "rgba(1,1,0,0.95)",
						image = "overlay-suspicion",
						active = parseBool(overlayStatus.suspicion)
					},
					children = {} },
				-- { tag = "Image",
				-- 	attributes = {class = "enemy-overlay",
				-- 		image = "overlay-enemy",
				-- 		active = XML.EnemyOverlay(zone)
				-- 	},
				-- 	children = {} },
				-- { tag = "Image",
				-- 	attributes = {class = "monstrosity-overlay",
				-- 		image = "overlay-monstrosity",
				-- 		active = XML.MonstrosityOverlay(zone)
				-- 	},
				-- children = {} }
			} }
		}

    if isShowingScores then

      local infamyValue = Z.countInfamy(zone)
      local powerValue = Z.countPower(zone)
      local boonsValue = Z.countBoons(zone)
      local totalValue = powerValue + boonsValue - infamyValue

      if infamyValue == 0 then infamyValue = "" else infamyValue = "-" .. infamyValue end
      if powerValue == 0 then powerValue = "" end
      if boonsValue == 0 then boonsValue = "" end
      if infamyValue == "" and powerValue == "" and boonsValue == "" then totalValue = "~" end

      table.insert(XMLData, { tag = "Panel",
        attributes = {class = "main",
          height = "150",
          padding = "0 0 0 0",
          pivot = "0.5 0",
          position = "0 5 -50",
          rotation = "-70 0 0",
          spacing = "1",
          width = "80",
          active = totalValue ~= "",
          color = "rgba(0, 0, 0, 0.5)",
          childForceExpandHeight="true",
          childForceExpandWidth="true"},
        children = {
          { tag = "Panel",
            attributes = {
              class = "powerPanel",
              height = "40%",
              rectAlignment = "UpperLeft",
              width = "25%",
              offsetXY="15 0",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = powerValue,
                attributes = {
                  rectAlignment = "UpperRight",
                  height = "33%",
                  class = "powerCount",
                  -- scale = "0.75",
                  color = "#FF0000",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#660000",
                  id = "powerCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          },
          { tag = "Panel",
            attributes = {
              class = "boonPanel",
              height = "40%",
              rectAlignment = "UpperCenter",
              width = "25%",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = boonsValue,
                attributes = {
                  rectAlignment = "UpperCenter",
                  height = "33%",
                  class = "boonCount",
                  -- scale = "0.75",
                  color = "#990000",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#999999",
                  id = "boonCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          },
          { tag = "Panel",
            attributes = {
              class = "infamyPanel",
              height = "40%",
              rectAlignment = "UpperRight",
              width = "50%",
              offsetXY="-15 0",
              flexibleWidth="0",
              flexibleHeight="0",
              childForceExpandWidth="false",
              childForceExpandHeight="false"
            },
            children = {
              { tag = "Text",
                value = infamyValue,
                attributes = {
                  rectAlignment = "UpperLeft",
                  height = "33%",
                  class = "infamyCount",
                  -- scale = "0.75",
                  color = "#FFFF00",
                  fontSize = "25",
                  fontStyle = "Bold",
                  outline = "#555500",
                  id = "infamyCount",
                  flexibleHeight="0",
                  flexibleWidth="0"
                },
                children = {} }
            }
          }
          -- { tag = "Panel",
          --   attributes = {
          --     class = "totalPanel",
          --     height = "33%",
          --     rectAlignment = "LowerCenter",
          --     width = "100%",
          --     flexibleWidth="0",
          --     flexibleHeight="0",
          --     childForceExpandWidth="false",
          --     childForceExpandHeight="false"},
          --   children = {
          --     { tag = "Text",
          --       value = totalValue,
          --         attributes = {
          --           id="totalCount",
          --           class = "totalCount",
          --           color = "#FFFFFF",
          --           fontSize = "40",
          --           fontStyle = "Bold",
          --           outline = "#FF0000",
          --           flexibleHeight="0",
          --           flexibleWidth="0"
          --         },
          --       children = {} }
          --   }
          -- }
        }
        })

    zone.UI.setXmlTable(XMLData)
  else
    zone.UI.setXmlTable({{tag = "Panel", attributes = {}, children = {}}})
  end
end

function Z.discardTorporedVamps()
	local discardPos = getObjectFromGUID(G.decks.characterDiscardSpot).getPosition()
	discardPos.y = discardPos.y + 1
	for _, zone in pairs(Z.getPlayerZones()) do
		if (Z.isTorpored(zone)) then
			for _, obj in pairs(Z.getTaggedZoneObjects(zone, {"Power", "Infamy", "ExhaustTorpor"})) do
				obj.destruct()
			end
			U.forEach(Z.getBoons(zone), function(boon)
				local boonClan = string.gsub(boon.getName(), " Boon", "")
				local clanChest = getObjectFromGUID(G.mainStorage.clanStorage[boonClan])
				clanChest.putObject(boon)
			end)
			Z.getCard(zone).setPosition(discardPos)
			Wait.time(function() Z.clearOverlay(zone) end, 0.5)
		end
	end
end

function Z.returnAnkhs(dir, isAwardingPower)
	if isAwardingPower == nil then isAwardingPower = true end
  local gameState = Global.getTable("gameState")
  if gameState.round > 9 then isAwardingPower = false end

	for _, zone in pairs(Z.getPlayerZones()) do
		local returningAnkhs = Z.getAnkhs(zone, dir)
		U.forEach(returningAnkhs, function(obj) BGE.sendAnkhHome(obj) end)
		if (isAwardingPower and #ankhObjs > 0) then
			local powerBox = getObjectFromGUID(G.tokenSources.power);
			local powerPos = zone.getPosition()
			powerPos.y = powerPos.y + 1
			powerBox.takeObject({
				index = 1,
				smooth = false,
				position = powerPos
			})
		end
	end
end

function Z.burnAnkhs(zone)
	U.forEach(Z.getAnkhs(zone), function(ankh) BGE.burnAnkh(ankh) end)
end


return Z
