local U = require("lib.utilities")
local Z


function onLoad()
	Z = Global.getTable("Z")
end

local function leftToRightObjectSort(a, b) return b.getPosition().x > a.getPosition().x end
local function leftToRightPosSort(a, b) return b.x < a.x end

local function getTokens()
	local classTokens = U.filter(U.findAboveObject(self, "Tile"),
		function(obj) return obj.hasTag("ClassToken") end)
	table.sort(classTokens, leftToRightObjectSort)
	return classTokens
end

local function getClassOfToken(token)
	if U.isFlipped(token) then return "elitist"
	else return "egalitarian" end
end

local function getLocationOfToken(token)
	if token.getPosition().z < self.getPosition().z then return "judices"
	else return "vaticanum" end
end

local function getTokenStatus()
	return U.map(getTokens(), function(token) return {
		class = getClassOfToken(token),
		location = getLocationOfToken(token)
	} end)
end

local function getTokenPositions()
	local tokenPositions = {}
	local snapPoints = U.map(self.getSnapPoints(),
		function(snapData)
			snapData.position.y = snapData.position.y + 0.5
			return snapData.position
		end)
	local vaticanumSnaps = U.filter(snapPoints, function(pos) return pos.z < 0 end)
	local judicesSnaps = U.filter(snapPoints, function(pos) return pos.z > 0 end)
	table.sort(vaticanumSnaps, leftToRightPosSort)
	table.sort(judicesSnaps, leftToRightPosSort)
	for i = 1, 4 do
		tokenPositions[i] = {vaticanum = self.positionToWorld(vaticanumSnaps[i]), judices = self.positionToWorld(judicesSnaps[i])}
	end
	return tokenPositions
end

local function getTokenData()
	local tokenData = {}
	local tokens = getTokens()
	local status = getTokenStatus()
	local snaps = getTokenPositions()
	for i = 1, 4 do
		tokenData[i] = {
			token = tokens[i],
			class = status[i].class,
			location = status[i].location,
			vaticanum = snaps[i].vaticanum,
			judices = snaps[i].judices
		}
	end
	return tokenData
end

function CheckForTrial()
	-- log(getTokenData())
	local judicesTokens = U.filter(getTokenData(),
		function(tData) return tData.location == "judices"
		end)
	if #judicesTokens < 4 then return false end
	local elitistTokens = U.filter(judicesTokens, function(tData) return tData.class == "elitist" end)
	if #elitistTokens == 1 then
		UI.setValue("inquisitionTrialNotice-elitist", #elitistTokens .. " elitist")
		UI.setValue("inquisitionTrialNotice-egalitarian", 4 - #elitistTokens .. " egalitarians")
	elseif #elitistTokens == 3 then
		UI.setValue("inquisitionTrialNotice-elitist", #elitistTokens .. " elitists")
		UI.setValue("inquisitionTrialNotice-egalitarian", 4 - #elitistTokens .. " egalitarian")
	else
		UI.setValue("inquisitionTrialNotice-elitist", #elitistTokens .. " elitists")
		UI.setValue("inquisitionTrialNotice-egalitarian", 4 - #elitistTokens .. " egalitarians")
	end
	UI.show("inquisitionTrialNotice")
	UI.show("inquisitionTrialNotice_1")
	UI.show("inquisitionTrialNotice_2")
	UI.show("inquisitionTrialNotice_3")
	return true
end

function EndTrial()
	-- log("*** RETURN TO VATICANUM ***")
	-- log(getTokenData())
	U.forEach(getTokenData(),
		function(tData)
			tData.token.setPositionSmooth(tData.vaticanum)
		end, 0.15)
	UI.hide("inquisitionTrialNotice")
	UI.hide("inquisitionTrialNotice_1")
	UI.hide("inquisitionTrialNotice_2")
	UI.hide("inquisitionTrialNotice_3")
end

function onLoad()
	-- log(getTokenData())
end