local U = {}

local ISDEBUGGING = false

function U.pFloat(num)
    if (num) then
        return math.ceil(num * 100) / 100
    else
        return 0
    end
end
function U.pAngle(num, interval)
  if not interval then interval = 45 end
  return math.floor((num / interval) + 0.5) * interval
end
function U.pRotation(rot, interval)
	return U.map(rot, function(rVal) return U.pAngle(rVal, interval) end)
end

function U.findAboveObject(obj, type)
    local objBounds = obj.getBounds()
    objBounds.center.y = objBounds.center.y + (0.5 * objBounds.size.y) - 2.5
    objBounds.size.y = 5

    local hitList = Physics.cast({
			origin = objBounds.center,
			type = 3,
			direction = {0,1,0},
			size = objBounds.size,
			max_distance = 0,
			debug = (ISDEBUGGING or false)
		})
    if not hitList then return {} end

    local refinedList = {}
    for _, obj in ipairs(hitList) do
			if (obj.hit_object.guid ~= obj.guid and (type == nil or obj.hit_object.type == type)) then
				table.insert(refinedList, obj.hit_object)
			end
    end
    return refinedList
end

function U.transferContents(fromObj, toObj)
    for _, containedObject in ipairs(fromObj.getObjects()) do
        toObj.putObject(fromObj.takeObject({smooth = false}))
    end
end

function U.mutateObjects(containerObj, mutateFunc)
  local stagingPos = {
    x = containerObj.getPosition().x,
    y = containerObj.getPosition().y + 5,
    z = containerObj.getPosition().z
  }
  for _, objRef in ipairs(containerObj.getObjects()) do
    containerObj.takeObject({
      position = stagingPos,
      top = false,
      smooth = false,
      callback_function = function(obj)
        mutateFunc(obj)
        containerObj.putObject(obj)
      end})
  end
end

function U.findOnObject(baseObj, type, cast)
end

local function checkSnapPoint(snapPoint, axis, coordsFilter)
    if (snapPoint and snapPoint.position) then
        if (axis and coordsFilter[axis]) then
            local snapPos = math.ceil(snapPoint.position[axis] * 10) / 10
            local testPos = math.ceil(coordsFilter[axis] * 10) / 10
            return snapPos == testPos
        end
        return true
    end
    return false
end

function U.getSnapPoints(board, coordsFilter, sortAxis)
    local snapPoints = {}
    for _, point in ipairs(board.getSnapPoints()) do
        local isValid = true
        if (coordsFilter) then
            for i, thisAxis in ipairs({"x", "y", "z"}) do
                isValid = isValid and checkSnapPoint(point, thisAxis, coordsFilter)
            end
        end
        if (isValid) then
            table.insert(snapPoints, point)
        end
    end

    if (sortAxis) then
        table.sort(snapPoints, function(a,b) return a.position[sortAxis] > b.position[sortAxis] end)
    end

    return snapPoints
end

function U.getSnapPointPositions(board, coordsFilter, sortAxis)
    return U.map(U.getSnapPoints(board, coordsFilter, sortAxis), function(snap) return snap.position end)
end

function U.findSnapPoint(snapPoints, pos, fuzziness)
	local baseObj, snapObj
		if type(snapPoints) == "userdata" and snapPoints.getSnapPoints ~= nil then
			baseObj = snapPoints
			snapPoints = U.map(baseObj.getSnapPoints(), function(snapData)
				snapData.position = baseObj.positionToWorld(snapData.position)
				return snapData
			end)
		end
		if type(pos) == "userdata" and pos.getSnapPoints ~= nil then
			snapObj = pos
			pos = snapObj.getPosition()
		end
    fuzziness = fuzziness or 0.1
    for slot, snap in ipairs(snapPoints) do
        if (snap.position) then
          snap = snap.position
        end
        local xPos = U.pFloat(pos.x)
        local zPos = U.pFloat(pos.z)
        local xSnap = U.pFloat(snap.x)
        local zSnap = U.pFloat(snap.z)
        local isXOkay = false
        local isZOkay = false
        if (pos.x == nil) then
            isXOkay = true
        elseif (xPos >= (xSnap - fuzziness) and xPos <= (xSnap + fuzziness)) then
            isXOkay = true
        end
        if (pos.z == nil) then
            isZOkay = true
        elseif (zPos >= (zSnap - fuzziness) and zPos <= (zSnap + fuzziness)) then
            isZOkay = true
        end
        if (isXOkay and isZOkay) then
            return slot
        end
    end
end

function U.makeRing(objs, centerPos, radius, params)
    local angleStep = 360 / U.count(objs)
    local angleTable = {}
    local nameTable = {}
    for _, obj in pairs(objs) do table.insert(nameTable, obj.getName()) end
    table.sort(nameTable)
    for i, objName in ipairs(nameTable) do
        angleTable[objName] = angleStep * (i - 1)
    end

    local objPositions = {}

    for i, obj in pairs(objs) do
        if (params and params.scale) then
            obj.setScale(params.scale)
        end
        local thisAngle = angleTable[obj.getName()]
        obj.setPosition({
            x = centerPos.x + (radius * math.sin(math.rad(thisAngle))),
            y = centerPos.y + 1,
            z = centerPos.z + (radius * math.cos(math.rad(thisAngle)))
        })
        obj.setRotation({x = 0, y = 180, z = 0})
    end
end

function U.count(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end

function U.split(inputstr, sep)
    if sep == nil then
      sep = "%s"
    else
      inputstr = string.gsub(inputstr, sep .. " ", sep)
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
      table.insert(t, str)
    end
    return t
end

function U.forEach(table, func, delayStep)
	if delayStep == nil then delayStep = 0 end
	local waitTime = 0
  for k,v in pairs(table) do
		Wait.time(function() func(v, k) end, waitTime)
		waitTime = waitTime + delayStep
  end
end

function U.map(table, func)
  local new_table = {}
  for k,v in pairs(table) do
    new_table[k] = func(v,k)
  end
  return new_table
end

function U.filter(tb, func)
  local new_table = {}
  local index = 0
  for k,v in pairs(tb) do
    index = index + 1
    if (func(v, k)) then
      if (k == index) then
        table.insert(new_table, v)
      else
        new_table[k] = v
      end
    end
  end
  return new_table
end

function U.invert(tb)
	local new_table = {}
	for k,v in pairs(tb) do
		if U.isIn(v, {"string", "number"}) then
			new_table[v] = k
		elseif U.isIn(v, {"boolean", "nil", "table", "function"}) then
			new_table[JSON.encode(v)] = k
		else
			new_table.user_data = k
		end
	end
	return new_table
end

-- function U.conc(...)
-- 	local arg = {...}
-- 	local tb1 = table.remove(arg, 1)
-- 	for _, tb in ipairs(arg) do
-- 		log("TB: " .. JSON.encode(tb))
-- 		for i = 1, #tb do
-- 			log("TB[" .. i .. "] " .. tb[i])
-- 			tb1[#tb1 + 1] = tb[i]
-- 		end
-- 	end
-- 	return tb1
-- end
function U.concat(t1,t2)
    for i=1,#t2 do
        t1[#t1+1] = t2[i]
    end
    return t1
end

function U.concatMult(...)
	local args = {...}
	local tb = {}
	U.forEach(args, function(arg)
		tb = U.concat(tb, arg)
	end)
	return tb
end

function U.flatten(tb)
	local newTable = {}
	for _, val in pairs(tb) do
		if type(val) == "table" then
			U.concat(newTable, U.flatten(val))
		else
			table.insert(newTable, val)
		end
	end
	return newTable
end

function U.find(tb, func)
  for k,v in pairs(tb) do
    if (func(v,k)) then return v end
  end
  return nil
end

function U.findIndex(tb, func)
  for k,v in pairs(tb) do
    if (func(v,k)) then return k end
  end
	return nil
end

function U.compact(table)


end

function U.reverse(table)
    local rev = {}
    for i = #table, 1, -1 do
    	rev[#rev+1] = table[i]
    end
    return rev
end

function U.isIn(elem, table)
  for _, value in pairs(table) do
    if value == elem then
      return true
    end
  end
  return false
end

function U.isFlipped(obj)
  local zRot = U.pAngle(obj.getRotation().z, 90)
  return zRot == 180
end

local isSplashActive = false
local function SplashMessageTo(visibilityTargets, messageData, delay)
    if (not delay) then
        delay = 5
    end
    -- log("Splashing '" .. messageData.title .. "' '" .. messageData.subTitle .. "' - isSplashActive = " .. tostring(isSplashActive))
    if (isSplashActive) then
        Wait.time(
        function()
            SplashMessageTo(visibilityTargets, messageData)
        end,
        4)
    else
        isSplashActive = true
        UI.setAttribute("splashMessage", "visibility", visibilityTargets)
        Wait.time(
            function()
                UI.hide("splashMessage")
                isSplashActive = false
            end,
            delay
        )
    end
end
function U.splashMessage(title, subtitle, body)
    if (isSplashActive) then
        Wait.time(
            function()
                U.splashMessage(title, subtitle, body)
            end,
        1.5)
    else
        UI.hide("splashMessage")
        isSplashActive = true
        UI.setValue("splashMessageTitle", title or "")
        UI.setValue("splashMessageSubtitle", subtitle or "")
        UI.setValue("splashMessageBody", body or "")
        UI.show("splashMessage")
        Wait.time(
            function()
                isSplashActive = false
            end,
        1)
        Wait.time(
            function()
                if (not isSplashActive) then
                    UI.hide("splashMessage")
                end
            end,
        5)
    end
end
function U.splashUIElement(elemID, duration, delay)
  if (duration == nil) then duration = 5 end
  if (delay == nil or delay == 0) then
    UI.show(elemID)
    Wait.time(function() UI.hide(elemID) end, duration)
  else
    Wait.time(function() U.splashUIElement(elemID, duration, 0) end, delay)
  end
end
function U.alertGM(message)
  broadcastToColor(message, "Red")
end

function U.hasAnyTag(obj, tags)
	for _, tag in pairs(tags) do
		if obj.hasTag(tag) then return true end
	end
	return false
end

function U.findClanTag(obj)
    if (obj.hasTag("Brujah")) then return "Brujah" end
    if (obj.hasTag("Gangrel")) then return "Gangrel" end
    if (obj.hasTag("Lasombra")) then return "Lasombra" end
    if (obj.hasTag("Malkavian")) then return "Malkavian" end
    if (obj.hasTag("Nosferatu")) then return "Nosferatu" end
    if (obj.hasTag("Toreador")) then return "Toreador" end
    if (obj.hasTag("Tremere")) then return "Tremere" end
    if (obj.hasTag("Tzimisce")) then return "Tzimisce" end
    if (obj.hasTag("Ventrue")) then return "Ventrue" end
    return nil
end

function U.findColorTag(obj)
    if (obj.hasTag("Red")) then return "Red" end
    if (obj.hasTag("Yellow")) then return "Yellow" end
    if (obj.hasTag("Blue")) then return "Blue" end
    return nil
end

function U.getHost()
  return Player.Red
  -- for _, player in ipairs(Player.getPlayers()) do
  --   if (player.host) then
  --     return player
  --   end
  -- end
end

function U.getZoneBounds(zone)
	local zoneExtent = U.map(zone.getScale(), function(val) return 0.5 * val end)
	local zonePos = zone.getPosition()
	return U.map(zonePos, function(coord, axis) return {min = coord - zoneExtent[axis], max = coord + zoneExtent[axis]} end)
end
--#endregion

function U.isInside(zone, pos, ignoreY)
	if ignoreY == nil then ignoreY = true end
	local zoneBounds = U.getZoneBounds(zone)
	return pos.x >= zoneBounds.x.min and pos.x <= zoneBounds.x.max
		and (ignoreY or pos.y >= zoneBounds.y.min and pos.y <= zoneBounds.y.max)
		and pos.z >= zoneBounds.z.min and pos.z <= zoneBounds.z.max
end

function U.parsePosition(obj)
	local posVals, rotVals
	if type(obj) ~= "userdata" then return end
	local desc = obj.getDescription()
	if type(desc) ~= "string" or string.find(desc, "^{%d+.%d+, %d+.%d+, %d+.%d+}") == nil then return end
	local posRotSplit = U.split(desc, "|")
	local posString, rotString = posRotSplit[1], posRotSplit[2]
	if type(posString) == "string" then
		posString = string.gsub(string.sub(posString, 2, #posString - 1), " ", "")
		posVals = U.map(U.split(posString, ","), function(strVal) return 1 * strVal end)
		if #posVals == 3 then
			posVals = {x = posVals[1], y = posVals[2], z = posVals[3]}
		end
	end
	if type(rotString) == "string" then
		rotString = string.gsub(string.sub(rotString, 2, #rotString - 1), " ", "")
		rotVals = U.map(U.split(rotString, ","), function(strVal) return 1 * strVal end)
		if #rotVals == 3 then
			rotVals = {x = rotVals[1], y = rotVals[2], z = rotVals[3]}
		end
	end
	return posVals, rotVals
end

-- function U.try(fn, ...)
--   local arg = {...}
--   return xpcall(
--     -- function wrapper to pass function arguments
--     function(...) return fn(unpack(arg)) end,
--     -- error function
--     function(msg) return error(msg, 3) end
--   )
-- end

function U.round(num, sigDigits)
  if (sigDigits == nil) then sigDigits = 1 end
  local roundMult = 10 ^ sigDigits
	return (math.floor(num * roundMult + 0.5)) / roundMult
end

function U.roundTableVals(table, sigDigits)
  local newTable = {}
  for key, val in pairs(table) do
    newTable[key] = U.round(val, sigDigits)
  end
  return newTable
end

function U.getValues(table)
	local values = {}
	for _, val in ipairs(table) do
		table.insert(values, val)
	end
	return values
end

function U.getKeys(table)
	local keys = {}
	for _, key in ipairs(table) do
		table.insert(keys, key)
	end
	return keys
end

function U.clone(t, isDeepCloning)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

return U
