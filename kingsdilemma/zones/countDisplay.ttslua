local S = require("kingsdilemma.core.state")
local U = require("lib.utilities")
local V = require("kingsdilemma.core.voting")
local C = require("kingsdilemma.lib.constants")

local countTag, isPublic
local linkedZone, oppZone
local total = 0
local value, subValue = "", ""
local color = Color(C.LightColors.Amber)

local function getLinkedTotal() return linkedZone and linkedZone.call("GetCount") or 0 end
local function getLinkedColor() return linkedZone and linkedZone.call("GetColor") or Color.Black end
local function getOppTotal() return oppZone and oppZone.call("GetCount") or 0 end

local function getVisibility()
	local colorTag = U.findColorTag(self)
	if isPublic then return U.join(S.getOtherColors(colorTag), "|")
	else return colorTag or "" end
end

local function updateLinkedZone() if linkedZone then linkedZone.call("UpdateCount") end end
local function updateOppZone() if oppZone then oppZone.call("UpdateCount") end end

function GetColor() return color end
function GetValue() return value end
function GetCount() return total end

function SetColor(col)
	local oldColor = Color(color)
	color = Color(col)
	if not oldColor:equals(color, 0.1) then
		UpdateXMLTable()
	end
end

local function isContraLinked() return getLinkedTotal() > 0 and not getLinkedColor():equals(color, 0.1) end
local function isShowingX() return GetCount() > 0 and (isContraLinked() or getOppTotal() > 0) end

local function updateValue()
	local oldValue, oldSubValue = value, subValue
	if isShowingX() then
		value = "X"
		if oldValue ~= value then
			updateOppZone()
		end
	elseif total == 0 then
		value = ""
		if oldValue == "X" then
			updateOppZone()
		end
	else
		value = tostring(total)
	end

	local linkedTotal = getLinkedTotal()
	local linkedColor = getLinkedColor()
	if isShowingX() then
		subValue = ""
	elseif linkedTotal > 0 and color:equals(linkedColor, 0.1) then
		subValue = "(" .. tostring(linkedTotal) .. ")"
		if total > 0 then
			value = "+" .. string.gsub(value, "[^%d]", "")
		end
	else
		value = string.gsub(value, "[^%d]", "")
		subValue = ""
	end

	if value ~= oldValue or subValue ~= oldSubValue then
		UpdateXMLTable()
	end
end

function UpdateCount()
	total = 0
	U.forEach(self.getObjects(), function(token)
		total = total + token.value
	end)

	updateValue()
end

function UpdateXMLTable()
	local xmlTable = {}
	if value == "" and subValue == "" then
		table.insert(xmlTable, {})
	else
		local panelXML = {
			tag = "Panel",
			attributes = {
				height = "800",
				width = "600",
				position = "0 -50 -150",
				rotation = "-80 0 0",
				visibility = getVisibility()
			},
			children = {}
		}
		if value ~= "" then
			table.insert(panelXML.children, {
				tag = "Text",
				value = value,
				attributes = {
					ignoreLayout = "True",
					rectAlignment = "LowerCenter",
					height = "300",
					color = U.GetHex(color),
					outline = "Black",
					outlineSize = "3",
					font = "Fonts/Friz",
					fontSize = "80",
					scale = "1 2 1"
				}
			})
		end
		if subValue ~= "" then
			table.insert(panelXML.children, {
				tag = "Text",
				value = subValue,
				attributes = {
					ignoreLayout = "True",
					rectAlignment = "UpperCenter",
					height = "100",
					color = U.GetHex(color),
					outline = "Black",
					outlineSize = "2",
					font = "Fonts/Friz",
					fontSize = "40",
					scale = "1 2 1"
				}
			})
		end
		table.insert(xmlTable, panelXML)
	end

	log({XMLTable = JSON.encode_pretty(xmlTable)})

	self.UI.setXmlTable(xmlTable)
end

function onLoad()
	if self.hasTag("SourceObj") then
		onObjectEnterZone = nil
		onObjectLeaveZone = nil
		return
	end
	isPublic = self.hasTag("Zone_PublicUI")

	if self.hasTag("PowerToken") then countTag = "PowerToken"
	elseif self.hasTag("CoinToken") then countTag = "CoinToken"
	end

	local colorTag = U.findColorTag(self)

	if colorTag ~= nil then
		Wait.time(function()
			if self.hasAnyTag({"Zone_VoteAye", "Zone_VoteNay"}) then
				linkedZone = getObjectsWithAllTags({colorTag, "Zone_PublicUI", "PowerToken"})[1]
				if self.hasTag("Zone_VoteAye") then
					oppZone = getObjectsWithAllTags({colorTag, "Zone_VoteNay"})[1]
				else
					oppZone = getObjectsWithAllTags({colorTag, "Zone_VoteAye"})[1]
				end
			end
			-- log({linkedZone = linkedZone, oppZone = oppZone})
		end, 1)
	end

	if self.hasTag("Zone_VoteAye") then
		color = Color(C.LightColors.Blue)
	elseif self.hasTag("Zone_VoteNay") then
		color = Color(C.LightColors.Red)
	end

	UpdateCount()
end

local function zoneUpdate(zone, token)
	if zone.guid == self.guid and token ~= nil and token.hasTag(countTag) then
		UpdateCount()
	end
end

onObjectEnterZone = zoneUpdate
onObjectLeaveZone = zoneUpdate