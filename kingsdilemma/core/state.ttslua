local U = require("lib.utilities")
local C = require("kingsdilemma.lib.constants")

local S = {}

local INITGAMESTATE = {
	gameMode = C.Modes.NONE,
	gamePhase = C.Phases.NONE,
	playerData = { -- Extracts data from playerStorage for each player playing
		Red = {},
		Purple = {},
		Green = {},
		Yellow = {},
		Blue = {}
	},
	playerStorage = {},
	curLeader = nil,
	curModerator = nil
}

function S.refreshStateDebug(stateData)
	local function parseCode(val, excludeKeys)
		if val == nil then return "nil" end
		if excludeKeys == nil then return JSON.encode_pretty(val) end
		return JSON.encode_pretty(U.filter(val, function(_, key) return not U.isIn(key, excludeKeys) end))
	end

  if (stateData == nil) then stateData = Global.getTable("gameState") end
  UI.setValue("debugState", parseCode(stateData))
end

function S.getGameState()
  S.refreshStateDebug()
  return Global.getTable("gameState")
end

function S.setGameState(data)
  Global.setTable("gameState", data)
  S.refreshStateDebug(data)
  return
end

function S.getStateVal(key, subKey)
  local state = Global.getTable("gameState")
  S.refreshStateDebug(state)
  if not state[key] then return state[key] end
  if subKey then return state[key][subKey] end
  return state[key]
end

function S.getPlayerVal(player, key, subKey)
	if player == nil then return end
  local pState = S.getStateVal("playerData", player.color)
  if not pState[key] then return pState[key] end
  if subKey then return pState[key][subKey] end
  return pState[key]
end

function S.setStateVal(value, key, subKey)
  local state = Global.getTable("gameState")
  if (subKey) then
      if (state[key] == nil) then state[key] = {} end
      state[key][subKey] = value
  else
      state[key] = value
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end

function S.setStateVals(stateData)
  local state = Global.getTable("gameState")
  for key, val in pairs(stateData) do
    state[key] = val
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end

function S.setPlayerVal(value, player, key, subKey)
	local pState = S.getStateVal("playerData", player.color)
	if (subKey) then
		if (pState[key] == nil) then pState[key] = {} end
		pState[key][subKey] = value
	else
		pState[key] = value
	end
	S.setStateVal(pState, "playerData", player.color)
end

function S.resetGameState(isWipingPlayerData)
	local newState = U.clone(INITGAMESTATE, true)
  local state = Global.getTable("gameState")

	if not isWipingPlayerData and state.playerData ~= nil then
		newState.playerData = state.playerData
	end

  Global.setTable("gameState", newState)
  S.refreshStateDebug()
end

function S.isInMode(modes)
	if type(modes) == "string" then modes = {modes} end
	return U.isIn(S.getStateVal("gameMode"), modes)
end

function S.isInPhase(phases)
	if type(phases) == "string" then phases = {phases} end
	return U.isIn(S.getStateVal("gamePhase"), phases)
end

function S.isDebugging()
	return UI.getAttribute("debugStatePanel", "active") == "True"
end

function S.getStoredPlayerData(player)
	if player == nil then return nil end
	if string.gmatch(player.steam_name or " ", "^Player ") then
		-- This is a hotseat player used for debugging; return its data
		return S.getStateVal("playerStorage", player.steam_name)
	end
	if U.isIn(player.color, C.PlayerColors) then
		return S.getStateVal("playerStorage", tostring(player.steam_id))
	end
end

function S.storePlayerData(player)
	if player == nil then return U.forEach(S.getPlayers(), S.storePlayerData) end
	local pData = S.getStateVal("playerData", player.color)
	if pData == nil then return nil end
	if string.gmatch(player.steam_name or " ", "^Player ") then
		-- This is a hotseat player used for debugging; store its data under its name
		return S.setStateVal(pData, "playerStorage", player.steam_name)
	end
	if U.isIn(player.color, C.PlayerColors) then
		return S.setStateVal(pData, "playerStorage", tostring(player.steam_id))
	end
end

function S.refreshPlayerData()
	S.storePlayerData()
	U.forEach(S.getPlayers(), function(player)
		if U.isIn(player.color, C.PlayerColors) then
			return S.setStateVal(S.getStoredPlayerData(player), "playerData", player.color)
		end
	end)
end

function S.getPlayers()
	return U.filter(
		U.map(C.PlayerColors, function(color) return Player[color] end),
		function(player) return player.steam_name ~= nil end
	)
end

function S.getPlayerNum(player)
	return U.findIndex(S.getPlayers(), function(pl) return player.color == pl.color end)
end

function S.getPlayerOf(obj)
	if obj == nil then return nil end
	if obj.hasTag("Player1") then return Player[C.PlayerColors[1]] end
	if obj.hasTag("Player2") then return Player[C.PlayerColors[2]] end
	if obj.hasTag("Player3") then return Player[C.PlayerColors[3]] end
	if obj.hasTag("Player4") then return Player[C.PlayerColors[4]] end
	if obj.hasTag("Player5") then return Player[C.PlayerColors[5]] end
	return nil
end



return S