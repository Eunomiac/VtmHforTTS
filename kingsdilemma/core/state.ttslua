local U = require("lib.utilities")
local C = require("kingsdilemma.lib.constants")

local S = {}

local INITGAMESTATE = {
	gameMode = C.Modes.NONE,
	gamePhase = C.Phases.NONE,
	playerData = { -- Need to change this to record player data by steam_id
		Red = {},				-- so players can rotate in and out of games
		Purple = {},
		Green = {},
		Yellow = {},
		Blue = {}
	},
	curLeader = nil,
	curModerator = nil
}

function S.refreshStateDebug(stateData)
	local function parseCode(val, excludeKeys)
		if val == nil then return "nil" end
		if excludeKeys == nil then return JSON.encode_pretty(val) end
		return JSON.encode_pretty(U.filter(val, function(_, key) return not U.isIn(key, excludeKeys) end))
	end

  if (stateData == nil) then stateData = Global.getTable("gameState") end
  UI.setValue("debugState", parseCode(stateData))
end

function S.getGameState()
  S.refreshStateDebug()
  return Global.getTable("gameState")
end

function S.setGameState(data)
  Global.setTable("gameState", data)
  S.refreshStateDebug(data)
  return
end

function S.getStateVal(key, subKey)
  local state = Global.getTable("gameState")
  S.refreshStateDebug(state)
  if not state[key] then return state[key] end
  if subKey then return state[key][subKey] end
  return state[key]
end

function S.setStateVal(value, key, subKey)
  local state = Global.getTable("gameState")
  if (subKey) then
      if (state[key] == nil) then state[key] = {} end
      state[key][subKey] = value
  else
      state[key] = value
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end

function S.setStateVals(stateData)
  local state = Global.getTable("gameState")
  for key, val in pairs(stateData) do
    state[key] = val
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end

function S.resetGameState()
	local newState = U.clone(INITGAMESTATE, true)
  local state = Global.getTable("gameState")

	if state.playerData ~= nil then
		newState.playerData = state.playerData
	end

  Global.setTable("gameState", newState)
  S.refreshStateDebug()
end

function S.isInMode(modes)
	if type(modes) == "string" then modes = {modes} end
	return U.isIn(S.getStateVal("gameMode"), modes)
end

function S.isInPhase(phases)
	if type(phases) == "string" then phases = {phases} end
	return U.isIn(S.getStateVal("gamePhase"), phases)
end

function S.isDebugging()
	return UI.getAttribute("debugStatePanel", "active") == "True"
end

return S