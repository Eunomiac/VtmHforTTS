local U = require("lib.utilities")
local C = require("kingsdilemma.lib.constants")
local OU = require("kingsdilemma.objects.objUtilities")

local S = {}

local INITGAMESTATE = {
	gameMode = C.Modes.NONE,
	gamePhase = C.Phases.NONE,
	playerData = { -- Extracts data from playerStorage for each player playing
		Red = {},
		Purple = {},
		Green = {},
		Yellow = {},
		Blue = {}
	},
	playerStorage = {},
	curLeader = nil,
	curModerator = nil
}

function S.refreshStateDebug(stateData)
	local function parseCode(val, excludeKeys)
		local encodeString
		if val == nil then return "nil" end
		if excludeKeys == nil then
			encodeString = JSON.encode_pretty(val)
		else
			encodeString = JSON.encode_pretty(U.filter(val, function(_, key) return not U.isIn(key, excludeKeys) end))
		end
		return string.gsub(encodeString, "% % ", "..")
	end

  if (stateData == nil) then stateData = Global.getTable("gameState") end
  UI.setValue("stateDisplay", parseCode(stateData))
end

-- #region Basic Getters & Setters
function S.getGameState()
  S.refreshStateDebug()
  return Global.getTable("gameState")
end
function S.setGameState(data)
	data.playerData = {
		Red = "Player 2",
		Purple = "Player 3",
		Green = "Player 1",
		Yellow = "Player 4",
		Blue = "Player 5"
	}
  Global.setTable("gameState", data)
  S.refreshStateDebug(data)
  return
end
function S.getStateVal(key, subKey)
  local state = Global.getTable("gameState")
  S.refreshStateDebug(state)
  if not state[key] then return state[key] end
  if subKey then return state[key][subKey] end
  return state[key]
end
function S.setStateVal(value, key, subKey)
  local state = Global.getTable("gameState")
  if (subKey) then
      if (state[key] == nil) then state[key] = {} end
      state[key][subKey] = value
  else
      state[key] = value
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end
function S.setStateVals(stateData)
  local state = Global.getTable("gameState")
  for key, val in pairs(stateData) do
    state[key] = val
  end
  Global.setTable("gameState", state)
  S.refreshStateDebug(state)
end
-- #endregion

-- #region PlayerData Getters & Setters
function S.getStorageID(player)
	if player == nil then return nil end
	if string.match(player.steam_name or " ", "^Player ") then
		return player.steam_name
	end
	return tostring(player.steam_id)
end
function S.getPlayerData(player)
	if player == nil then return end
	return S.getStateVal("playerStorage", S.getStorageID(player))
end
function S.getPlayerVal(player, key, subKey)
	if player == nil then return end
  local pID = S.getStateVal("playerData", player.color)
	if pID == nil then return nil end
	local pData = S.getStateVal("playerStorage", pID)
	if not pData[key] then return pData[key] end
  if subKey then return pData[key][subKey] end
  return pData[key]
end
function S.setPlayerData(player, pData)
	S.setStateVal(pData, "playerStorage", S.getStorageID(player))
end
function S.setPlayerVal(value, player, key, subKey)
	local pState = S.getStateVal("playerStorage", S.getStorageID(player))
	if (subKey) then
		if (pState[key] == nil) then pState[key] = {} end
		pState[key][subKey] = value
	else
		pState[key] = value
	end
	S.setPlayerData(player, pState)
end
-- #endregion
-- #region Player Instance Getters
function S.getPlayer(playerRef)
	if playerRef == nil then return end -- Or, fetch current player in turn order, during voting
	if type(playerRef) == "userdata" then
		if playerRef.steam_id ~= nil then return playerRef end
		return S.getPlayerOf(playerRef) or OU.GetPlayerFromAngle(playerRef)
	elseif type(playerRef) == "string" then
		if Player[playerRef] ~= nil then return Player[playerRef] end
		return U.find(S.getPlayers(), function(player) return
			player.getName() == playerRef
			or player.steam_id == playerRef
			or player.steam_name == playerRef
		end)
	elseif type(playerRef) == "number" then
		return S.getPlayers()[playerRef]
		end
end

function S.getPlayers()
	return U.filter(
		U.map(C.PlayerColors, function(color) return Player[color] end),
		function(player) return player.steam_name ~= nil end
	)
end

function S.getPlayerNum(player)
	return U.findIndex(S.getPlayers(), function(pl) return player.color == pl.color end)
end

function S.getPlayerOf(obj)
	if obj == nil then return nil end
	if obj.hasTag("Player1") then return S.getPlayers()[1] end
	if obj.hasTag("Player2") then return S.getPlayers()[2] end
	if obj.hasTag("Player3") then return S.getPlayers()[3] end
	if obj.hasTag("Player4") then return S.getPlayers()[4] end
	if obj.hasTag("Player5") then return S.getPlayers()[5] end
	return nil
end
-- #endregion

function S.resetGameState(isWipingPlayerData)
	local newState = U.clone(INITGAMESTATE, true)
  local state = Global.getTable("gameState")

	if not isWipingPlayerData and state.playerData ~= nil then
		newState.playerData = state.playerData
	end

  Global.setTable("gameState", newState)
  S.refreshStateDebug()
end

function S.isInMode(modes)
	if type(modes) == "string" then modes = {modes} end
	return U.isIn(S.getStateVal("gameMode"), modes)
end

function S.isInPhase(phases)
	if type(phases) == "string" then phases = {phases} end
	return U.isIn(S.getStateVal("gamePhase"), phases)
end

function S.isDebugging()
	return UI.getAttribute("debugStatePanel", "active") == "True"
end





return S