local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")
local O = require("kingsdilemma.lib.objects")
local OU = require("kingsdilemma.objects.objUtilities")

local P = {}

Players = {}



local function getAngleOfPlayer(player)
	if player == nil then return end
	local playerNum = U.findIndex(C.PlayerColors, function(col) return col == player.color end)
	if playerNum == nil then return end
	return C.PlayerAngles[player.color]
end



function P.RotateToPlayer(objOrTransform, toPlayer, fromPlayer)
	if fromPlayer == nil then return end
	local fromAngle = getAngleOfPlayer(fromPlayer)
	local toAngle = getAngleOfPlayer(toPlayer)
	local angleDelta = toAngle - fromAngle
	return OU.RotateByAngle(objOrTransform, angleDelta)
end

function P.SpawnForAll(obj)
	local objOwner = S.getPlayerOf(obj)
	if objOwner == nil then return end
	local ownerNum = U.findIndex(C.PlayerColors, function(col) return col == objOwner.color end)
	U.forEach(S.getPlayers(), function(player, i)
		if player.color == objOwner.color then return end
		local transformData = P.RotateToPlayer(obj, player, objOwner)
		if transformData == nil then return end
		local objData = {
			data = obj.getData(),
			position = transformData.position,
			rotation = transformData.rotation,
			scale = transformData.scale,
			callback_function = function(spawnedObj)
				spawnedObj.removeTag("Player" .. ownerNum)
				spawnedObj.addTag("Player" .. i)
			end
		}
		spawnObjectData(objData)
	end)
end

function P.MoveForAll(obj, guids, objOwner)
	if objOwner == nil then objOwner = S.getPlayerOf(obj) end
	if objOwner == nil then return end
	-- log({obj = obj, guids = guids, objOwner = objOwner})
	U.forEach(guids, function(guid, color)
		-- log({guid = guid, color = color})
		local player = Player[color]
		local targetObj = O.Get(guid)
		local transformData = P.RotateToPlayer(obj, player, objOwner)
		-- log({player = player, targetObj = targetObj, transformData = transformData})
		if transformData == nil then return end
		targetObj.setPosition(transformData.position)
		targetObj.setRotation(transformData.rotation)
		targetObj.setScale(transformData.scale)
	end)
end

function P.AssignTitle(playerNum, title)
	if playerNum == nil or playerNum < 1 or playerNum > 5 then return end
	if title == "Moderator" then


	elseif title == "Leader" then

	end
end

function P.setPlayerHouseName(player, title)
	S.setPlayerVal(title, player, "houseName")
	local playerNum = S.getPlayerNum(player)
	local houseScreen = getObjectsWithAllTags({"screenCenter", "Player" .. playerNum})[1]
	houseScreen.reload()
end

return P