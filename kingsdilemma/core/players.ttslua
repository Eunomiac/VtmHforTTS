local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")
local O = require("kingsdilemma.lib.objects")
local OU = require("kingsdilemma.objects.objUtilities")

local P = {}

function P.ClearPlayerColor(color)
	if color == nil then return U.forEach(C.SeatColors, P.ClearPlayerColor) end
	local playerObjects = getObjectsWithTag(color)
	local playerZones = U.filter(getObjects(), function(obj) return obj.type ~= "Hand" and obj.getGMNotes() == "ZonePlayer" .. color end)
	U.forEach(U.concat(playerObjects, playerZones), function(obj)
		if obj.hasTag("HouseCard") then
			obj.setTags({"HouseCard"})
			obj.setPosition(C.Spots.Storage.HouseCard.position)
			obj.setRotation(C.Spots.Storage.HouseCard.rotation)
		else
			obj.destruct()
		end
	end)
end



function P.getRotatedPlayerTransform(objOrTransform, player)
	local fromAngle = OU.GetNearestPlayerAngle(objOrTransform)
	local toAngle = S.getPlayerAngle(player)
	return OU.RotateByAngle(objOrTransform, toAngle - fromAngle)
end

function P.RotateToPlayer(objs, player)
	if type(objs) ~= "table" then objs = {objs} end

	U.forEach(objs, function(obj)
		local startPos = obj.getPosition()
		local toData = P.getRotatedPlayerTransform(obj, player)
		local endPos, endRot = toData.position, toData.rotation

		U.waitRestingSequence({
			function()
				obj.setPositionSmooth(startPos:add(Vector(0, 2, 0)))
				return obj
			end,
			function()
				obj.setPositionSmooth(Vector(endPos):add(Vector(0, 2, 0)), false, false)
				obj.setRotationSmooth(endRot, false, false)
				return obj
			end,
			function()
				obj.setPositionSmooth(endPos)
				return obj
			end
		})
	end)
end

function P.AssignTitle(playerNum, title)
	if playerNum == nil or playerNum < 1 or playerNum > 5 then return end
	if title == "Moderator" then


	elseif title == "Leader" then

	end
end



return P