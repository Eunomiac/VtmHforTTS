local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")
local O = require("kingsdilemma.lib.objects")

local L = {}

local DefaultTransitionTime = 0.5

local function generateLightModes(lightTag)
	if U.isIn(lightTag, {"lightInfluence", "lightWealth", "lightMorale", "lightWelfare", "lightKnowledge"}) then
		local resource = string.match(lightTag, "light(.*)")
		local function getTokenPos()
			local token = getObjectsWithTag(resource)[1]
			if token == nil then
				return Vector(C.Spots.Board.ResourceTokens[resource].center.position)
			else
				U.Assert("generateLightModes", token, "Object")
				return token.getPosition()
			end
		end
		return {
			loadRotation = Vector(0, 0, 0),
			default = "off",
			off = function()
				return {
					enabled = false,
					color = C.LightColors.Ambient,
					range = 66,
					angle = 20,
					intensity = 0.75,
					rotation = Vector({0, 0, 0}),
					position = getTokenPos():add(Vector({0, 2.5, 0}))
				}
			end,
			ambient = function()
				return {
					enabled = true,
					color = C.LightColors.Ambient,
					range = 66,
					angle = 20,
					intensity = 0.75,
					rotation = Vector({0, 0, 0}),
					position = getTokenPos():add(Vector({0, 2.5, 0}))
				}
			end,
			momentumUp1 = function()
				return {
					enabled = true,
					color = C.LightColors.Amber,
					range = 66,
					angle = 25,
					intensity = 0.75,
					rotation = Vector({-53.31, 0, 0}),
					position = getTokenPos():add(Vector({0, 1.96, -2.38}))
				}
			end,
			momentumUp2 = function()
				return {
					enabled = true,
					color = C.LightColors.Yellow,
					range = 66,
					angle = 20,
					intensity = 1.5,
					rotation = Vector({-67.41, 0.00, 0.00}),
					position = getTokenPos():add(Vector({0, 1.52, -3}))
				}
			end,
			momentumDown1 = function()
				return {
					enabled = true,
					color = C.LightColors.Amber,
					range = 66,
					angle = 25,
					intensity = 0.75,
					rotation = Vector({53.31, 0, 0}),
					position = getTokenPos():add(Vector({0, 1.96, 2.38}))
				}
			end,
			momentumDown2 = function()
				return {
					enabled = true,
					color = C.LightColors.Yellow,
					range = 66,
					angle = 20,
					intensity = 1.5,
					rotation = Vector({67.41, 0.00, 0.00}),
					position = getTokenPos():add(Vector({0, 1.52, 3}))
				}
			end
		}
	end
end

L.LIGHTMODES = {
	lightLectern = {
		default = "ambient",
		off = {
			enabled = false,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 70,
			intensity = 2,
			rotation = Vector(300, 0, 0)
		},
		ambient = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 70,
			intensity = 2,
			rotation = Vector(300, 0, 0)
		},
		spotlightChronicleCard = {
			enabled = true,
			color = Color.Yellow:lerp(Color.Grey, 0.4),
			range = 200,
			angle = 35,
			intensity = 1,
			rotation = Vector(312, 0, 0)
		},
		spotlightEnvelope = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290, 0, 8)
		},
		spotlightStickers = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290, 0, 352)
		},
		spotlightMystery = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 33,
			intensity = 2,
			rotation = Vector(275, 0, 0)
		},
		spotlightPlinth = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290, 0, 0)
		},
		spotlightTransit = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 50,
			intensity = 1,
			rotation = Vector(304, 0, 0)
		},
		storyCard = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 25,
			intensity = 1.5,
			rotation = Vector({371.21, 0.00, 0.00 })
		}
	},
	lightMainTop = {
		default = "ambient",
		off = {
			enabled = false,
			color = C.LightColors.Ambient,
			range = 83,
			angle = 60,
			intensity = 1.5
		},
		ambient = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 83,
			angle = 60,
			intensity = 1.5
		}
	},
	lightMainBottom = {
		default = "ambient",
		off = {
			enabled = false,
			color = C.LightColors.Ambient,
			range = 83,
			angle = 60,
			intensity = 1.5
		},
		ambient = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 83,
			angle = 60,
			intensity = 1.5
		}
	},
	lightLeader = {
		default = "off",
		off = {
			enabled = false,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		}
	},
	lightModerator = {
		default = "off",
		off = {
			enabled = false,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		}
	},
	lightStability = {
		loadRotation = Vector(0, 0, 0),
		default = function()
			if S.isInMode({"NONE", "SETSSIONINIT", "CAMPAIGNSETUP"}) then
				return "off"
			else
				return "on"
			end
		end,
		off = {
			enabled = false,
			color = Color(1, 1, 1),
			range = 12,
			angle = 20,
			intensity = 1
		},
		on = function()
			local stabilityToken = getObjectsWithTag("StabilityMarker")[1]
			local stabilityPos = stabilityToken.getPosition()
			local distRatio = C.Spots.Board.StabilityToken.center.position:distance(stabilityPos) / C.Spots.Board.StabilityToken.center.position:distance(C.Spots.Board.StabilityToken.top.position)
			local lerpAngle = Vector(20,0,0):lerp(Vector(28,0,0), distRatio).x
			local lerpIntensity = Vector(1,0,0):lerp(Vector(2,0,0), distRatio).x
			local lerpRange = Vector(12,0,0):lerp(Vector(18,0,0), distRatio).x
			local lerpColor
			if distRatio <= 0.5 then
				lerpColor = C.LightColors.StabilityToken.center:lerp(C.LightColors.StabilityToken.half, 2 * distRatio)
			else
				lerpColor = C.LightColors.StabilityToken.half:lerp(C.LightColors.StabilityToken.ends, 2 * (distRatio - 0.5))
			end

			stabilityPos.x = C.Spots.Board.StabilityToken.center.position.x
			stabilityPos.z = math.min(
				math.max(
					stabilityPos.z,
					C.Spots.Board.StabilityToken.bottom.position.z
				),
				C.Spots.Board.StabilityToken.top.position.z
			)
			-- log({distRatio = distRatio})
			local lData = {
				enabled = true,
				color = lerpColor,
				range = lerpRange,
				angle = lerpAngle,
				intensity = lerpIntensity,
				position = stabilityPos:add(Vector(0, 4, 0))
			}
			-- log(lData)
			return lData
		end
	},
	lightInfluence = generateLightModes("lightInfluence"),
	lightWealth = generateLightModes("lightWealth"),
	lightMorale = generateLightModes("lightMorale"),
	lightWelfare = generateLightModes("lightWelfare"),
	lightKnowledge = generateLightModes("lightKnowledge"),
	lightBalance = {
		loadRotation = Vector({16.91, 0, 0}),
		default = function()
			if S.isInMode({"NONE", "SETSSIONINIT", "CAMPAIGNSETUP"}) then
				return "off"
			else
				return "on"
			end
		end,
		off = {
			enabled = false,
			color = C.LightColors.Ambient,
			range = 30,
			angle = 30,
			intensity = 0.8,
			rotation = Vector({16.91, 0, 0})
		},
		on = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 30,
			angle = 30,
			intensity = 0.8,
			rotation = Vector({16.91, 0, 0})
		}
	}
	-- lightVote = {
	-- 	off = {
	-- 		enabled = false,
	-- 		color = Color(0.5, 0.5, 0.5),
	-- 		range = 55,
	-- 		angle = 57,
	-- 		intensity = 4
	-- 	},
	-- 	ambient = {
	-- 		color = Color(0.5, 0.5, 0.5),
	-- 		range = 55,
	-- 		angle = 57,
	-- 		intensity = 4
	-- 	},
	-- 	aye = {
	-- 		color = Color(0, 1, 1),
	-- 		range = 55,
	-- 		angle = 63,
	-- 		intensity = 4
	-- 	},
	-- 	nay = {
	-- 		color = Color(1, 0, 0),
	-- 		range = 55,
	-- 		angle = 63,
	-- 		intensity = 4
	-- 	}
	-- }
}



local function getComp(light) return light.getChildren()[1].getChildren()[2].getComponents()[2] end

local function getLight(lightName, playerRef)
	local player
	local tags = { lightName }
	if playerRef ~= nil then
		player = S.getPlayer(playerRef)
		table.insert(tags, player.color)
	end
	local lights = getObjectsWithAllTags(tags)
	if #lights > 1 then
		return U.AlertGM("[Error: getLight()] Multiple '" .. "'s found!")
	end
	if #lights == 0 then
		---@diagnostic disable-next-line: need-check-nil
		return U.AlertGM("[Error: getLight()] No '" ..
		"' light found" .. (player == nil and "!" or (" for " .. player.color .. " Player.")))
	end
	return lights[1]
end



local function getAllLights()
	return U.filter(getObjects(), function(obj)
		return obj.getChildren ~= nil
				and obj.getChildren()[1] ~= nil
				and string.match(obj.getChildren()[1].name, "^spotlight")
				and getComp(obj).name == "Light"
	end)
end


local function showArrow(light)
	if light == nil then return U.forEach(getAllLights(), showArrow) end
	light.AssetBundle.playLoopingEffect(0)
	local playerColor = U.findColorTag(light)
	if playerColor ~= nil then
		return light.highlightOn(Color[playerColor])
	else
		return light.highlightOn(Color.White)
	end
end

local function hideArrow(light)
	if light == nil then return U.forEach(getAllLights(), hideArrow) end
	light.AssetBundle.playLoopingEffect(1)
	light.highlightOff()
end



local function setEnabled(light, enabled, transitionTime)
	local lComp = getComp(light)
	if lComp.get("enabled") ~= enabled then
		if transitionTime == nil then transitionTime = DefaultTransitionTime end
		if enabled == true then
			local finalIntensity = lComp.get("intensity")
			lComp.set("intensity", 0)
			lComp.set("enabled", true)
			return U.Lerp(
				function(intensity) lComp.set("intensity", intensity) end,
				0,
				finalIntensity,
				transitionTime
			)
		else
			local startingIntensity = lComp.get("intensity")
			return U.RunSequence({
				function()
					return U.Lerp(
						function(intensity) lComp.set("intensity", intensity) end,
						startingIntensity,
						0,
						transitionTime
					)
				end,
				function()
					lComp.set("enabled", false)
					return 0.5
				end,
				function()
					lComp.set("intensity", startingIntensity)
				end
			})
		end
	end
end
local function setRange(light, range) getComp(light).set("range", range) end
local function setIntensity(light, intensity) getComp(light).set("intensity", intensity) end
local function setColor(light, color) getComp(light).set("color", Color(color)) end
local function setAngle(light, angle) getComp(light).set("spotAngle", angle) end

local function getEnabled(light) return getComp(light).get("enabled") end
local function getRange(light) return getComp(light).get("range") end
local function getIntensity(light) return getComp(light).get("intensity") end
local function getColor(light) return getComp(light).get("color") end
local function getAngle(light) return getComp(light).get("spotAngle") end

local function setLightMode(lightName, mode, playerNum, transitionTime)
	if mode == nil then return end
	if transitionTime == nil then transitionTime = DefaultTransitionTime end
	if playerNum == "ALL" then return U.forEach(S.getPlayers(), function(_, pNum) setLightMode(lightName, mode, pNum) end) end
	local light = getLight(lightName, playerNum)

	if type(mode) == "function" then mode = mode() end


	if L.LIGHTMODES[lightName] == nil then
		return U.AlertGM("[Error: setLightMode] No modes configured for light '" .. lightName .. "'")
	end

	local lData = L.LIGHTMODES[lightName][mode]
	if type(lData) == "function" then
		lData = lData()
	elseif type(lData) == "table" then
		lData = U.clone(lData)
	end

	if not lData then
		return U.AlertGM("[Error: setLightMode] No such light mode '" .. mode .. "' for light '" .. lightName .. "'")
	end

	-- log({light = light, lightName = lightName, mode = mode, lData = lData})
	local afterVals = {}

	if lData.enabled ~= nil then
		if lData.enabled == getEnabled(light) then lData.enabled = nil
		elseif lData.enabled == true then
			setIntensity(light, 0)
			setAngle(light, 0)
			setEnabled(light, true)
		else
			afterVals.intensity = lData.intensity
			afterVals.angle = lData.angle
			lData.intensity = 0
			lData.angle = 0
		end
	end

	return U.RunSequence({
		function()
			local lerpFuncs = {}

			if lData.range ~= nil then
				table.insert(lerpFuncs, U.Lerp(function(range) setRange(light, range) end, getRange(light), lData.range, transitionTime))
			end
			if lData.intensity ~= nil then
				table.insert(lerpFuncs, U.Lerp(function(intensity) setIntensity(light, intensity) end, getIntensity(light), lData.intensity, transitionTime))
			end
			if lData.angle ~= nil then
				table.insert(lerpFuncs, U.Lerp(function(angle) setAngle(light, angle) end, getAngle(light), lData.angle, transitionTime))
			end
			if lData.color ~= nil then
				table.insert(lerpFuncs, U.Lerp(function(color) setColor(light, color) end, getColor(light), lData.color, transitionTime))
			end
			if lData.rotation ~= nil then
				table.insert(lerpFuncs, U.setRotationSlow(light, lData.rotation, transitionTime))
			end
			if lData.position ~= nil then
				table.insert(lerpFuncs, U.setPositionSlow(light, lData.position, transitionTime))
			end

			return lerpFuncs
		end,
		function()
			if lData.enabled == false then
				setEnabled(light, false)
				setIntensity(light, afterVals.intensity)
				setAngle(light, afterVals.angle)
			end
		end
	})
end

function L.ResetLights()
	U.forEach(L.LIGHTMODES, function(modes, name)
		if modes.loadRotation then
			local light = getLight(name)
			setEnabled(light, false)
			light.setRotation(Vector(180, 0, 0))
		end
	end)
end

function L.PrimeLights()
	U.forEach(L.LIGHTMODES, function(modes, name)
		if modes.loadRotation then
			local light = getLight(name)
			setEnabled(light, false)
			light.setRotationSmooth(modes.loadRotation)
		end
	end)
end

function L.LoadLights(lightMode, transitionTime)
	if lightMode == nil then lightMode = "default" end
	if transitionTime == nil then transitionTime = 3 end
	-- setLightMode("lightLectern", "ambient", nil, 3)
	-- setLightMode("lightMainTop", "ambient", nil, 3)
	-- setLightMode("lightMainBottom", "ambient", nil, 3)
	-- setLightMode("lightModerator", "off", nil, 3)
	-- setLightMode("lightLeader", "off", nil, 3)
	-- setLightMode("lightStability", "on", nil, 3)
	U.forEach(L.LIGHTMODES, function(modes, name)
		if lightMode == "default" then
			setLightMode(name, modes[lightMode], nil, transitionTime)
		else
			setLightMode(name, lightMode, nil, transitionTime)
		end
	end)
end
L.ShowArrows = showArrow
L.HideArrows = hideArrow
L.SetLightMode = setLightMode

L.LerpEnable = setEnabled

return L
