local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")

local L = {}

local LIGHTMODES = {
	lightLectern = {
		default = "ambient",
		ambient = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 80,
			angle = 70,
			intensity = 2.5,
			rotation = Vector(300,0,0)
		},
		spotlightEnvelope = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290,0,8)
		},
		spotlightStickers = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290,0,352)
		},
		spotlightMystery = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 33,
			intensity = 2,
			rotation = Vector(275,0,0)
		},
		spotlightPlinth = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 30,
			intensity = 2,
			rotation = Vector(290,0,0)
		},
		spotlightTransit = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 50,
			intensity = 1,
			rotation = Vector(304,0,0)
		},
		firstStoryCard = {
			enabled = true,
			color = C.LightColors.Ambient,
			range = 200,
			angle = 25,
			intensity = 1.5,
			rotation = Vector({11.21, 0.00, 0.00})
		}
	},
	lightMainTop = {},
	lightMainBottom = {},
	lightLeader = {
		off = {
			enabled = false
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		}
	},
	lightModerator = {
		off = {
			enabled = false
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			angle = 30,
			intensity = 10
		}
	},
	lightVote = {
		ambient = {
			color = Color(0.5, 0.5, 0.5),
			range = 55,
			angle = 57,
			intensity = 4
		},
		aye = {
			color = Color(0, 1, 1),
			range = 55,
			angle = 63,
			intensity = 4
		},
		nay = {
			color = Color(1, 0, 0),
			range = 55,
			angle = 63,
			intensity = 4
		}
	}
}



local function getComp(light) return light.getChildren()[1].getChildren()[2].getComponents()[2] end

local function getLight(lightName, playerRef)
	local player
	local tags = {lightName}
	if playerRef ~= nil then
		player = S.getPlayer(playerRef)
		table.insert(tags, player.color)
	end
	local lights = getObjectsWithAllTags(tags)
	if #lights > 1 then
		return U.alertGM("[Error: getLight()] Multiple '" .. "'s found!")
	end
	if #lights == 0 then
---@diagnostic disable-next-line: need-check-nil
		return U.alertGM("[Error: getLight()] No '" .. "' light found" .. (player == nil and "!" or (" for " .. player.color .. " Player.")))
	end
	return lights[1]
end

local function loadLights()
	U.forEach(LIGHTMODES, function(modes, name)
		if modes.default ~= nil then
			L.SetLightMode(name, modes.default)
			local lComp = getComp(getLight(name))
			log({
				enabled = lComp.get("enabled"),
				range = lComp.get("range"),
				intensity = lComp.get("intensity"),
				color = lComp.get("color"),
				angle = lComp.get("spotAngle")
			})
		end
	end)
end

local function getAllLights()
	return U.filter(getObjects(), function(obj)
		return obj.getChildren ~= nil
			and obj.getChildren()[1] ~= nil
			and string.match(obj.getChildren()[1].name, "^spotlight")
			and getComp(obj).name == "Light"
	end)
end


local function showArrow(light)
	if light == nil then return U.forEach(getAllLights(), showArrow) end
	light.AssetBundle.playLoopingEffect(0)
	local playerColor = U.findColorTag(light)
	if playerColor ~= nil then
		return light.highlightOn(Color[playerColor])
	else
		return light.highlightOn(Color.White)
	end
end

local function hideArrow(light)
	if light == nil then return U.forEach(getAllLights(), hideArrow) end
	light.AssetBundle.playLoopingEffect(1)
	light.highlightOff()
end

local function setEnabled(light, enabled) getComp(light).set("enabled", enabled) end
local function setRange(light, range) getComp(light).set("range", range) end
local function setIntensity(light, intensity) getComp(light).set("intensity", intensity) end
local function setColor(light, color) getComp(light).set("color", Color(color)) end
local function setAngle(light, angle) getComp(light).set("spotAngle", angle) end

local function setLightMode(lightName, mode, playerNum)
	if playerNum == "ALL" then return U.forEach(S.getPlayers(), function(_, pNum) setLightMode(lightName, mode, pNum) end) end
	local light = getLight(lightName, playerNum)

	if LIGHTMODES[lightName] == nil then
		return U.alertGM("[Error: setLightMode] No modes configured for light '" .. lightName .. "'")
	end
	local lData = LIGHTMODES[lightName][mode]
	if lData == nil then
		return U.alertGM("[Error: setLightMode] No such light mode '" .. mode .. "' for light '".. lightName .. "'")
	end

	if lData.enabled ~= nil then setEnabled(light, lData.enabled) end
	if lData.range ~= nil then setRange(light, lData.range) end
	if lData.intensity ~= nil then setIntensity(light, lData.intensity) end
	if lData.color ~= nil then setColor(light, lData.color) end
	if lData.angle ~= nil then setAngle(light, lData.angle) end
	if lData.rotation ~= nil then U.setRotationSlow(light, lData.rotation) end
	if lData.position ~= nil then U.setPositionSlow(light, lData.position) end

	return light
end

L.LoadLights = loadLights
L.ShowArrows = showArrow
L.HideArrows = hideArrow
L.SetLightMode = setLightMode

return L