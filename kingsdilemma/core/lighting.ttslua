local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")

local L = {}

local LIGHTMODES = {
	lightMainTop = {},
	lightMainBottom = {},
	lightLeader = {
		off = {
			enabled = false
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			spotAngle = 30,
			intensity = 10
		}
	},
	lightModerator = {
		off = {
			enabled = false
		},
		on = {
			enabled = true,
			color = Color(1, 1, 1),
			range = 66,
			spotAngle = 30,
			intensity = 10
		}
	},
	lightVote = {
		ambient = {
			color = Color(0.5, 0.5, 0.5),
			range = 55,
			spotAngle = 57,
			intensity = 4
		},
		aye = {
			color = Color(0, 1, 1),
			range = 55,
			spotAngle = 63,
			intensity = 4
		},
		nay = {
			color = Color(1, 0, 0),
			range = 55,
			spotAngle = 63,
			intensity = 4
		}
	}
}

local function getComp(light) return light.getChildren()[1].getChildren()[2].getComponents()[2] end

local function getLight(lightName, playerRef)
	local player = S.getPlayer(playerRef)
	local tags = {lightName}
	if player ~= nil then
		table.insert(tags, player.color)
	end
	local lights = getObjectsWithAllTags(tags)
	if #lights > 1 then
		return U.alertGM("[Error: getLight()] Multiple '" .. "'s found!")
	end
	if #lights == 0 then
		return U.alertGM("[Error: getLight()] No '" .. "' light found" .. (player == nil and "!" or (" for " .. player.color .. " Player.")))
	end
	return lights[1]
end

local function getAllLights()
	return U.filter(getObjects(), function(obj)
		return obj.getChildren ~= nil
			and obj.getChildren()[1] ~= nil
			and string.match(obj.getChildren()[1].name, "^spotlight")
			and getComp(obj).name == "Light"
	end)
end


local function showArrow(light)
	if light == nil then return U.forEach(getAllLights(), showArrow) end
	light.AssetBundle.playLoopingEffect(0)
	local playerColor = U.findColorTag(light)
	if playerColor ~= nil then
		return light.highlightOn(Color[playerColor])
	else
		return light.highlightOn(Color.White)
	end
end

local function hideArrow(light)
	if light == nil then return U.forEach(getAllLights(), hideArrow) end
	light.AssetBundle.playLoopingEffect(1)
	light.highlightOff()
end

local function setEnabled(light, enabled) getComp(light).set("enabled", enabled) end
local function setRange(light, range) getComp(light).set("range", range) end
local function setIntensity(light, intensity) getComp(light).set("intensity", intensity) end
local function setColor(light, color) getComp(light).set("color", Color(color)) end
local function setAngle(light, angle) getComp(light).set("spotAngle", angle) end

local function setLightMode(lightName, mode, playerNum)
	if playerNum == "ALL" then return U.forEach(S.getPlayers(), function(_, pNum) setLightMode(lightName, mode, pNum) end) end
	local light = getLight(lightName, playerNum)

	if LIGHTMODES[lightName] == nil then
		return U.alertGM("[Error: setLightMode] No modes configured for light '" .. lightName .. "'")
	end
	local lData = LIGHTMODES[lightName][mode]
	if lData == nil then
		return U.alertGM("[Error: setLightMode] No such light mode '" .. mode .. "' for light '".. lightName .. "'")
	end

	if lData.enabled ~= nil then setEnabled(light, lData.enabled) end
	if lData.range ~= nil then setRange(light, lData.range) end
	if lData.intensity ~= nil then setIntensity(light, lData.intensity) end
	if lData.color ~= nil then setColor(light, lData.color) end
	if lData.angle ~= nil then setAngle(light, lData.angle) end

end

L.ShowArrows = showArrow
L.HideArrows = hideArrow
L.SetLightMode = setLightMode

return L




-- light.setPositionSmooth(light.getPosition():rotateOver("y", 120), false, false)
-- light.setRotationSmooth(light.getRotation():add(Vector(0, 120, 0), false, false)


-- local light, hTarget, hVecs
-- hTarget = (hTarget == 5 and 1 or (hTarget + 1)); hTarget = hTarget == 5 and 1 or (hTarget + 1); light.setPositionSmooth(light.getPosition():rotateTowards(hVecs[hTarget]), false, false); light.setRotationSmooth(light.getRotation():add(Vector(0, 120, 0), false, false))

-- lua hVecs = {getObjectFromGUID("1ad79f").getPosition(), getObjectFromGUID("1b34af").getPosition(), getObjectFromGUID("b483e8").getPosition(), getObjectFromGUID("17082e").getPosition(), getObjectFromGUID("6d8aff").getPosition()}

-- Can also check which player the light is pointing at by seeking the minimum of 'light.getPosition():angle(hVecs[1-5])'


-- local handZones = get all hand zones
-- local sortedMins = table.sort(handZones, function(a, b) return self.getPosition():angle(a.getPosition()) < self.getPosition():angle(b.getPosition()) end)
-- local fromPosition = sortedMins[1].getPosition()
-- local targetHandZone = get hand zone of targeted player
-- local toPosition = targetHandZone.getPosition()
-- local angleDelta = fromPosition:angle(toPosition)
-- if fromPosition:rotateOver("y", 5):angle(toPosition) < angleDelta then angleDelta = -1 * angleDelta end
-- local toData = OU.RotateByAngle(self, angleDelta)
-- self.setPositionSmooth(toData.position, false, false)
-- self.setRotationSmooth(toData.rotation, false, false)

	-- then get position of hand zone you want to move towards, and calculate angleDelta =
		-- but need easy way to determine counterclockwise or clockwise by ONLY referring to the hand zone vectors -- cross product & left-hand rule?
		-- or, could do fromPosition:rotateOver("y", 5):angle(toPosition) > angleDelta --> Means angleDelta is in proper direction, so positive sign; else negative sign
	-- now, with angle delta, can use standard OU.RotateByAngle(objOrTransform, angleDelta)



	-- Minimum: given table of hand zones (this is likely the best way to get "direction" of player)
	-- local sortedMins =