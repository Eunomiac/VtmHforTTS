local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")

local MSG = {}

local DefaultDisplayTime = 1.5
local DefaultDisplayBuffer = 0.5

local defaultTextAttributes = {
	color = U.GetHex(Color.White),
	fontSize = "40",
	font = "Fonts/Friz",
	alignment = "MiddleCenter"
}

function MSG.Splash(messageLines, playerRef, displayTime, attributes)
	attributes = U.merge(defaultTextAttributes, attributes or {})
	local dTime, dBuffer = displayTime or DefaultDisplayTime, DefaultDisplayBuffer
	if type(displayTime) == "table" then
		dTime, dBuffer = displayTime.displayTime or DefaultDisplayTime, displayTime.displayBuffer or DefaultDisplayBuffer
	end
	if type(messageLines) ~= "table" then messageLines = {messageLines} end
	local panelRef = playerRef
	if panelRef == nil then panelRef = "All" end
	if U.Type(panelRef) ~= "string" or not string.match(panelRef, "^All") then
		panelRef = S.getPlayer(playerRef).color
	end
	local panelID, textID = "splashPanel_" .. panelRef, "splashText_" .. panelRef

	return U.RunSequence({
		function()
			UI.setAttribute(panelID, "active", "false")
			UI.setValue(textID, U.join(messageLines, "\n"))
			if attributes then
				UI.setAttributes(textID, attributes)
			end
			return MSG.Show(panelID, dTime)
		end,
		function()
			return MSG.Hide(panelID, dBuffer)
		end
	})
end

local currentQuery
function MSG.QueryResponse(index)
	if currentQuery ~= nil then
		Wait.time(function() currentQuery.response = currentQuery[U.getKeys(currentQuery)[index]] end, 0.25)
	end
	if currentQuery == nil then
		MSG.HideAll("splashQuery_")
	else
		MSG.Hide("splashQuery_" .. currentQuery.player.color)
	end
end

function MSG.SplashQuery(query, displayName, responseObj, playerRef)

	currentQuery = responseObj

	local player = S.getPlayer(playerRef)
	-- log({query=query, displayName = displayName, responseObj = responseObj, playerRef = playerRef, player = player, pColor = player.color})

	UI.setValue("splashQueryPlayerPrompt_" .. player.color, displayName .. ":")
	UI.setAttribute("splashQueryPlayerPrompt_" .. player.color, "color", U.GetHex(Color[player.color]:lerp(Color.White, 0.5)))
	UI.setValue("splashQueryPrompt_" .. player.color, query)

	local answerText = U.getKeys(responseObj)

	for i = 1, #answerText do
		UI.setAttribute("splashQueryContainer_Option" .. i .. "_" .. player.color, "active", "true")
		UI.setValue("splashQueryText_Option" .. i .. "_" .. player.color, answerText[i])
	end

	for i = #answerText + 1, 5 do
		UI.setAttribute("splashQueryContainer_Option" .. i .. "_" .. player.color, "active", "false")
		UI.setValue("splashQueryText_Option" .. i .. "_" .. player.color, "")
	end

	MSG.Show("splashQuery_" .. player.color)

	currentQuery.player = player

	return function() return currentQuery.response ~= nil end
end

function MSG.Show(id, waitTime)
	S.SafeShow(id)
	return waitTime or 0.5
end

function MSG.Hide(id, waitTime)
	S.SafeHide(id)
	return waitTime or 0.5
end

function MSG.HideAll(elemPrefix)
	local elemIDs = {}
	local elemPrefixes
	if elemPrefix == nil then elemPrefixes = {"splashPanel_", "consequencesQuery_", "turnHUD_"}
	else elemPrefixes = {elemPrefix} end
	U.forEach(elemPrefixes, function(prefix)
		U.forEach(C.SeatColors, function(color)
			table.insert(elemIDs, prefix .. color)
		end)
	end)

	U.forEach(elemIDs, function(id) MSG.Hide(id) end)

	return 2.5
end

return MSG