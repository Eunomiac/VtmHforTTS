-- require("vscode/console")
local U = require("lib.utilities")
local OU = require("kingsdilemma.objects.objUtilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")
local L = require("kingsdilemma.core.lighting")
local P = require("kingsdilemma.core.players")
local MSG = require("kingsdilemma.core.messaging")
local DIR = require("kingsdilemma.core.director")


-- function GetSelectedObject()
-- 	for _, player in pairs(Player.getPlayers()) do
-- 		local selObjs = player.getSelectedObjects()
-- 		if selObjs and #selObjs > 0 then
-- 			return selObjs[1]
-- 		end
-- 	end
-- 	return getObjectFromGUID("e19593")
-- end

-- local autoExecString = {
-- 	">",
-- 	"alias list ls -a",
-- 	"alias show list -r"
-- }

-- U.forEach({
-- 	oFocus = {
-- 		"add /objectFocus Player",
-- 		"call /GetSelectedObject",
-- 		"set /objectFocus ~",
-- 		"call /stringColorToRGB Pink",
-- 		"add /hColor ~",
-- 		"call /objectFocus/highlightOn /hColor 5",
-- 		"echo 'Changing focus to highlighted object.'"
-- 	}
-- }, function (arrStr, name)
-- 	console[name] = U.join(arrStr, ";")
-- 	table.insert(autoExecString, "alias " .. name .. " exec -s /console/" .. name)
-- end)


-- console.autoexec = U.join(autoExecString, ";")


-- alias pFocus exec -q "`set pFocus Turns/turn_color; echo Focus changed; ls pFocus"
function onLoad(save_data)
	S.InitializeGameState(save_data)

	-- log("Overriding King Name to 'Eglamore I of House Hedwyn'")
	-- S.setStateVal("Eglamore I of House Hedwyn", "gameState", "kingName")
	-- log("Adding 'Played' tag to Event Zone #79c7ed")
	-- getObjectFromGUID("79c7ed").addTag("Played")
	-- log("Overriding Description on Chronicle Sticker #647c28")
	-- getObjectFromGUID("647c28").setDescription("Ankist remembers House Lunargent for bringing lucrative trade in a novel style of abstract art to the kingdom.")
	-- log("Overriding Description on Chronicle Sticker #9388aa")
	-- getObjectFromGUID("9388aa").setDescription("Ankist remembers House Hedwyn for its strength enforcing the law - causing crime in the kingdom to plummet.")
	-- log("Overriding Description on Chronicle Sticker #f7e870")
	-- getObjectFromGUID("f7e870").setDescription("Ankist remembers House Silverlight for their emancipation of every Konfurtahn slave to reach the kingdom.")

	DIR.InitPreflight()
end

function onSave() return JSON.encode(S.getGameState()) end

-- function onUpdate() console.update() end

function onPlayerTurnStart(pColor)
	if U.IsDebugging() then

		P.SetCamera("BehindScreen", pColor, U.getHost())
	end
end

function onPlayerAction(player, action, targets)
	if #targets == 0 then return true end
	if action == Player.Action.FlipOver then
		U.forEach(targets, function(target)
			if U.hasAnyTag(target, {"PowerToken", "CoinToken"}) then
				OU.SplitObjByValue(target)
			else
				target.flip()
			end
		end)
		return false
	elseif action == Player.Action.Group then
		if U.find(targets, function(target) return U.hasAnyTag(target, {"PowerToken", "CoinToken"}) end) then
			OU.CombineObjsByValue(targets)
		else
			return true
		end
		return false
	elseif action == Player.Action.Delete then
		if player.host then return true end
		U.forEach(targets, function(target)
			if U.hasAnyTag(target, {"PowerToken", "CoinToken"}) then
				target.destruct()
			end
		end)
		return false
	end
	return true
end

function tryObjectEnterContainer(container, object)
	if container.hasTag("StoryCard") and object.hasTag("StoryCard") then return false end
	if container.hasTag("Played") and object.hasTag("Played") then return false end
	return true
end

function onObjectEnterZone(zone, obj)
	if zone.hasTag("EventCard") and obj.type == "Card" and U.hasAnyTag(obj, {"EventCard", "StoryCard", "TriggerCard", "Dilemma"}) then
		if obj.hasTag("StoryCard") and not U.hasDecal(obj, "Event") then return end
		obj.drop()
		U.waitUntil(
			function()
				local playedEventCards = U.filter(zone.getObjects(), function(o) return U.hasAnyTag(o, {"EventCard", "TriggerCard", "StoryCard", "Dilemma"}) and o.guid ~= obj.guid end)
				local snapSpot = U.filter(C.SnapPoints.Global, function(sPoint) return U.isIn("EventCard", sPoint.tags) end)[#playedEventCards + 1]

				U.setPositionSlow(obj, snapSpot.position, 1, nil, false)
				U.setRotationSlow(obj, Vector(snapSpot.rotation):setAt("z", U.pAngle(obj.getRotation().z, 90)), 1, nil, false)
				if U.hasDecal(obj, "Trigger") then
					obj.setTags({"TriggerCard", "Played"})
				elseif obj.hasDecal("Event") then
					obj.setTags({"EventCard"})
				end
				Wait.time(function()
					obj.setPosition(snapSpot.position)
					obj.setRotation(Vector(snapSpot.rotation):setAt("z", U.pAngle(obj.getRotation().z, 90)))
				end, 1.1)
			end,
			{0.3, obj}
		)
	end
end

function onObjectLeaveZone(zone, obj)
	if zone.hasTag("EventCard") and obj.type == "Card" and obj.hasTag("EventCard") then
		if U.hasDecal(obj, "Event") then U.removeDecal(obj, "Event") end
		obj.setTags({"StoryCard"})
	end
end

local function getBoundedPos(obj, xMin, xMax, zMin, zMax)
	local pos = obj.getPosition()
	if pos.x > xMax then pos.x = xMax end
	if pos.x < xMin then pos.x = xMin end
	if pos.z > zMax then pos.z = zMax end
	if pos.z < zMin then pos.z = zMin end
	return Vector(pos)
end

function onObjectDrop(pColor, obj)
	if obj.hasTag("DebugObj") then return end
	if S.isInPhase({C.Phases.GAMESETUP.SecretAgendas, C.Phases.END.SecretAgendas}) and obj.hasTag("SecretAgenda") then
		local player = S.getPlayer(pColor)
		local handObjs = player.getHandObjects()
		if U.find(handObjs, function(o) return o.guid == obj.guid end) then return end
		DIR.AssignSecretAgenda(player, obj)
	elseif obj.hasTag("StabilityMarker") then

		U.RunSequence({
			function()
				return {obj, 0.1}
			end,
			function()
				obj.setPosition(getBoundedPos(
					obj,
					C.Spots.Board.StabilityToken.center.position.x,
					C.Spots.Board.StabilityToken.center.position.x,
					C.Spots.Board.StabilityToken.bottom.position.z,
					C.Spots.Board.StabilityToken.top.position.z
				))
				return obj
			end,
			function() L.SetLightMode("lightStability", "on") end
		})
	elseif obj.hasTag("ResourceMarker") then
		local resource = U.find({"Influence", "Wealth", "Morale", "Welfare", "Knowledge"}, function(res) return obj.hasTag(res) end)
		if resource == nil then return end

		U.RunSequence({
			function() return {obj, 0.1} end,
			function()
				obj.setPosition(getBoundedPos(
					obj,
					C.Spots.Board.ResourceTokens[resource].center.position.x,
					C.Spots.Board.ResourceTokens[resource].center.position.x,
					C.Spots.Board.ResourceTokens[resource].bottom.position.z,
					C.Spots.Board.ResourceTokens[resource].top.position.z
				))
				if S.isInMode(C.Modes.PLAY) then
					DIR.BumpToken("Stability", DIR.GetStabilityBump())
				end
				return obj
			end,
			function()
				if S.isInMode(C.Modes.PLAY) then
					DIR.UpdateTokenLight("Stability")
				end
				return DIR.UpdateTokenLight(resource)
			end
		})
	end
end
