require("vscode/console")
local O = require("kingsdilemma.lib.objects")
local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local C = require("kingsdilemma.lib.constants")
local L = require("kingsdilemma.core.lighting")
local DIR = require("kingsdilemma.core.director")


function GetSelectedObject()
	for _, player in pairs(Player.getPlayers()) do
		local selObjs = player.getSelectedObjects()
		if selObjs and #selObjs > 0 then
			return selObjs[1]
		end
	end
	return getObjectFromGUID("e19593")
end

local autoExecString = {
	">",
	"alias list ls -a",
	"alias show list -r"
}

U.forEach({
	oFocus = {
		"add /objectFocus Player",
		"call /GetSelectedObject",
		"set /objectFocus ~",
		"call /stringColorToRGB Pink",
		"add /hColor ~",
		"call /objectFocus/highlightOn /hColor 5",
		"echo 'Changing focus to highlighted object.'"
	}
}, function (arrStr, name)
	console[name] = U.join(arrStr, ";")
	table.insert(autoExecString, "alias " .. name .. " exec -s /console/" .. name)
end)


console.autoexec = U.join(autoExecString, ";")


-- alias pFocus exec -q "`set pFocus Turns/turn_color; echo Focus changed; ls pFocus"
function onLoad(save_data)
	console.load()

	S.InitializeGameState(save_data)
	Global.call("UpdatePhaseDisplay")
	UI.show("sessionInitDisplay")
	L.PrimeLights()
	U.forEach(O.UninteractableObjs, function(oFunc) oFunc().interactable = false end)

	-- #region DEBUG
	-- Assign names to test function buttons
	Global.call("InitTestFuncButtons")
	-- Auto-assign "Player X"'s to colors
	local seats = U.clone(C.SeatColors)
	U.forEach(Player.getSpectators(), function(player)
		if string.match(player.steam_name, "^Player %d$") then
			while seats[1] and Player[seats[1]].steam_name ~= nil do
				U.shift(seats)
			end
			if #seats then player.changeColor(U.shift(seats)) end
		end
	end)
	-- #endregion

	UI.setValue("gameNumText", "Game " .. S.getStateVal("gameCount"))
end

function onSave() return JSON.encode(S.getGameState()) end

function onUpdate() console.update() end

function onPlayerChangeColor(color)
	if color == "Grey" then return end
	local player = Player[color]

	-- print(color)
end

local function getBoundedPos(obj, xMin, xMax, zMin, zMax)
	local pos = obj.getPosition()
	if pos.x > xMax then pos.x = xMax end
	if pos.x < xMin then pos.x = xMin end
	if pos.z > zMax then pos.z = zMax end
	if pos.z < zMin then pos.z = zMin end
	return Vector(pos)
end



function onObjectDrop(playerColor, obj)
	if obj.hasTag("StabilityMarker") then
		U.RunSequence({
			function() return {obj, 0.1} end,
			function()
				obj.setPosition(getBoundedPos(
					obj,
					C.Spots.Board.StabilityToken.center.position.x,
					C.Spots.Board.StabilityToken.center.position.x,
					C.Spots.Board.StabilityToken.bottom.position.z,
					C.Spots.Board.StabilityToken.top.position.z
				))
				return obj
			end,
			function() L.SetLightMode("lightStability", "on") end
		})
	elseif obj.hasTag("ResourceMarker") then
		local resource = U.find({"Influence", "Wealth", "Morale", "Welfare", "Knowledge"}, function(res) return obj.hasTag(res) end)
		if resource == nil then return end
		U.RunSequence({
			function() return {obj, 0.1} end,
			function()
				obj.setPosition(getBoundedPos(
					obj,
					C.Spots.Board.ResourceTokens[resource].center.position.x,
					C.Spots.Board.ResourceTokens[resource].center.position.x,
					C.Spots.Board.ResourceTokens[resource].bottom.position.z,
					C.Spots.Board.ResourceTokens[resource].top.position.z
				))
				return obj
			end,
			function()
				return DIR.UpdateMomentum(resource)
			end
		})
	end
end
