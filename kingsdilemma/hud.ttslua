-- #region IMPORTS ~
local DIR = require("kingsdilemma.core.director")
local P = require("kingsdilemma.core.players")
local O = require("kingsdilemma.lib.objects")
local C = require("kingsdilemma.lib.constants")
local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local HouseScreen = require("kingsdilemma.objs.p3screen")
local L = require("kingsdilemma.core.lighting")
local MSG = require("kingsdilemma.core.messaging")
-- #endregion

MessageQueue, QueueStatus = {}, {}

local TESTFUNCS = {
	Titles = function(button)
		if button == "-2" then
			L.SetLightMode("lightLeader", "off")
			L.SetLightMode("lightModerator", "off")
			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, 0)
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, 0)
		else
			local index = {
				U.randBetween(1, #S.getPlayers(), true),
				U.randBetween(1, #S.getPlayers(), true)
			}
			local players = {
				S.getPlayers()[index[1]],
				S.getPlayers()[index[2]]
			}
			L.SetLightMode("lightLeader", "on")
			L.SetLightMode("lightModerator", "on")

			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, players[1])
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, players[2])
		end
		-- log({rotatingTo = player})
	end,
	Seats = function(button)
		if button == "-2" then
			P.InitializeSeats(true, true)
		else
			P.InitializeSeats()
		end
	end,
	Messaging = function(button)
		U.RunSequence({
			function()
				MSG.Enqueue("The quick brown fox", "ALL")
				MSG.Enqueue("jumps over the", "ALL")
				MSG.Enqueue("lazy dog", "ALL")
				return MSG.RunQueue("ALL")
			end,
			function()
				U.alertGM("All Done!")
			end
		})
	end,
	Lerp = function(button)
		local testLight = getObjectFromGUID("6f9e66")
		if button == "-2" then
			L.LerpEnable(testLight, false)
		else
			L.LerpEnable(testLight, true)
		end
	end
}

function InitTestFuncButtons()
	local count = 0
	for i, name in ipairs(U.getKeys(TESTFUNCS)) do
		count = count + 1
		UI.setAttributes("debug_testFunc" .. count, {
			text = "T: " .. name,
			colors = "#666666|#AAAAAA|#FFFFFF|rgba(0.5, 0.5, 0.5, 0.5)",
			textAlignment = "MiddleLeft"
		})
	end
	TESTFUNCS = U.getValues(TESTFUNCS)
end



-- #endregion

-- #region Primary UI Event Functions
local function toggleXmlElement(elemID)
	log("Toggling " .. elemID)
	if string.lower(UI.getAttribute(elemID, "active")) == "false" then
		UI.setAttribute(elemID, "active", "true")
		UI.setValue("toggleElem_" .. elemID, "▼")
	else
		UI.setAttribute(elemID, "active", "false")
		UI.setValue("toggleElem_" .. elemID, "►")
	end
end
local function promptSimClick(player, button)
	local players = S.getPlayers()
	if button == "-2" then
		local otherColors = U.map(U.filter(players, function(pl)
			return pl.color ~= player.color
		end), function(pl) return pl.color end)
		log("Simulating clicks on " .. U.join(otherColors, ", "))
		local houses = U.shuffle(U.clone(C.Houses))
		for _, col in pairs(otherColors) do
			local clickElemID = "houseHover_" .. U.shift(houses) .. "_" .. col
			log("Simulating " .. col .. " Player clicking '" .. clickElemID .. "'")
			HUD_Click(Player[col], "-1", clickElemID)
		end
	else
		local playerOptions = U.map(players, function(pl, i)
			return "#" .. i .. " " .. pl.color .. " (" .. pl.steam_name .. ")"
		end)
		player.showOptionsDialog("Which player is clicking?", playerOptions, 1, function(_, i)
			local targetPlayer = players[i]
			player.showOptionsDialog("Which territory?", C.Houses, 1, function(houseName)
				if houseName == nil then return end
				local clickElemID = "houseHover_" .. houseName .. "_" .. targetPlayer.color
				log("Simulating " .. targetPlayer.color .. " Player clicking '" .. clickElemID .. "'")
				HUD_Click(targetPlayer, "-1", clickElemID)
			end)
		end)
	end
end
local function promptAssignHouseName(player)
	local players = S.getPlayers()
	local playerOptions = U.map(players, function(pl, i)
		return "#" .. i .. " " .. pl.color .. " (" .. pl.steam_name .. ")"
	end)
	player.showOptionsDialog("Name which player's house?", playerOptions, 1, function(_, i)
		local targetPlayer = players[i]
		player.showInputDialog(
			"What is their House Name?",
			S.getPlayerVal(targetPlayer, "house"),
			function (houseName)
				U.sequence({
					function()
						S.setPlayerVal(houseName, targetPlayer, "houseName")
						local houseScreen = getObjectsWithAllTags({"screenCenter", targetPlayer.color})[1]
						houseScreen.reload()
					end,
					3,
					function()
						DIR.UpdateChronicleCardNames()
					end
				})
			end)
	end)
end




function HUD_Click(player, button, id)
	log({player = player, button = button, id = id})
	if string.match(id, "^toggleElem_") then
		toggleXmlElement(string.gsub(id, "^toggleElem_", ""))
	elseif id == "advanceGamePhase" then
		DIR.ADVANCE()
	elseif id == "prompt_simClick" then
		promptSimClick(player, button)
	elseif id == "prompt_assignHouseName" then
		promptAssignHouseName(player)
	elseif id == "clearPlayers" then
		P.ClearSeats()
	elseif id == "resetTable" then
		DIR.RESET()
	elseif string.match(id, "^debug_testFunc") then
		id = string.gsub(id, "^debug_testFunc", "") * 1
		TESTFUNCS[id](button, player)
	elseif id == "debug_resetState" then
		S.resetGameState()
		Global.call("UpdatePhaseDisplay")
	elseif id == "debug_resetPlayers" then
		S.resetGameState(true)
		Global.call("UpdatePhaseDisplay")
	elseif id == "debug_setArrows" then
		if button == "-1" then
			L.ShowArrows()
		else
			L.HideArrows()
		end
	elseif string.match(id, "^houseHover_") then
		local houseName = string.match(id, "^houseHover_(.-)_.-$")
		DIR.HouseHUDClick(player, houseName)
	end
end

function HUD_HoverOn(player, returnString, id)
	if string.match(id, "^houseHover_") then
		local houseName = string.match(id, "^houseHover_(.-)_.-$")
		DIR.HouseHUDHoverOn(player, houseName)
	end
end

function HUD_HoverOff(player, returnString, id)
	if string.match(id, "^houseHover_") then
		local houseName = string.match(id, "^houseHover_(.-)_.-$")
		DIR.HouseHUDHoverOff(player, houseName)
	end
end

function UpdatePhaseDisplay()
	local mode, phase = S.getStateVal("gameMode"), S.getStateVal("gamePhase")
	UI.setValue("currentGameModeDisplay", mode)
	if mode ~= phase then
		UI.setValue("currentGamePhaseDisplay", phase)
		UI.show("currentGamePhaseContainer")
	else
		UI.hide("currentGamePhaseContainer")
	end
	local nextMode, nextPhase = S.getNextPhase()
	UI.setValue("nextGameModeDisplay", nextMode)
	if nextMode ~= nextPhase then
		UI.setValue("nextGamePhaseDisplay", nextPhase)
		UI.show("nextGamePhaseContainer")
	else
		UI.hide("nextGamePhaseContainer")
	end
end
-- #endregion
