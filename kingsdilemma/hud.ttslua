-- #region IMPORTS ~
local DIR = require("kingsdilemma.core.director")
local P = require("kingsdilemma.core.players")
local O = require("kingsdilemma.lib.objects")
local C = require("kingsdilemma.lib.constants")
local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local HouseScreen = require("kingsdilemma.objs.p3screen")
local L = require("kingsdilemma.core.lighting")
-- #endregion

local TESTFUNCS = {
	function(button)
		if button == "-2" then
			L.SetLightMode("lightLeader", "off")
			L.SetLightMode("lightModerator", "off")
			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, 0)
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, 0)
		else
			local index = {
				U.randBetween(1, #S.getPlayers(), true),
				U.randBetween(1, #S.getPlayers(), true)
			}
			local players = {
				S.getPlayers()[index[1]],
				S.getPlayers()[index[2]]
			}
			L.SetLightMode("lightLeader", "on")
			L.SetLightMode("lightModerator", "on")

			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, players[1])
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, players[2])
		end
		-- log({rotatingTo = player})
	end,
	function(_, player)
		local otherColors = U.map(U.filter(S.getPlayers(), function(pl)
			return pl.color ~= player.color
		end), function(pl) return pl.color end)
		log("Simulating clicks on " .. U.join(otherColors, ", "))
		local houses = U.shuffle(U.clone(C.Houses))
		for _, col in pairs(otherColors) do
			local clickElemID = "houseHover_" .. U.shift(houses) .. "_" .. col
			log("Simulating " .. col .. " Player clicking '" .. clickElemID .. "'")
			HUD_Click(Player[col], "-1", clickElemID)
		end
	end,
	function(button)
		local testObj = getObjectFromGUID("533718")
		U.RunSequence({
			function()
				testObj.setName("")
				testObj.setLock(false)
				return {testObj, 5}
			end,
			function()
				Player.Red.showInputDialog(
					"What shall we name it?",
					"Fetched Object",
					function (fetchedObjName) testObj.setName(fetchedObjName) end
				)
				return function() return testObj.getName() ~= "" end
			end,
			function() testObj.highlightOn(Color.fromString("Red")) end
		})
	end,
	function(button)
	end,
	function(button)
	end,
	function(button)
	end,
	function(button)
	end
}

-- #region House Selection ~
local HOUSE_SELECTION = {
	Current = {},
	UnselectedPlayers = {}
}

function InitHouseSelectionHUD()
	U.forEach(S.getPlayers(), function(player)
		if not S.getPlayerVal(player, "house") then
			table.insert(HOUSE_SELECTION.UnselectedPlayers, player)
		end
	end)
	if #HOUSE_SELECTION.UnselectedPlayers == 0 then
		DIR.AssignSelectedHouses()
	else
		RefreshHouseSelectionHUD()
	end
end

local function updateHouseHUD(houseName, player)
	if player == nil then
		return U.forEach(HOUSE_SELECTION.UnselectedPlayers,
			function(pl) updateHouseHUD(houseName, pl) end)
	end
	if not U.isIn(player.color, U.map(HOUSE_SELECTION.UnselectedPlayers, function(pl) return pl.color end)) then
		return UI.hide("houseSelection_" .. player.color)
	end

	local function isHouseAvailable(houseName)
		return not U.find(U.getValues(S.getPlayerData()), function(pData)
			return pData.house == houseName
		end)
	end

	UI.show("houseSelection_" .. player.color)

	if not isHouseAvailable(houseName) then
		HOUSE_SELECTION.Current[houseName] = false
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. player.color, {
			color = "rgba(0.3, 0.3, 0.3, 0.5)",
			outline = "Clear"
		})
		UI.setAttributes("houseHover_" .. houseName .. "_" .. player.color, {
			color = "rgba(0, 0, 0, 0)",
			raycastTarget = "False",
			onMouseDown = "",
			onMouseEnter = "",
			onMouseExit = "HUD_HoverOff"
		})
	elseif type(HOUSE_SELECTION.Current[houseName]) == "string" then
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. player.color, {
			color = "rgba(0.5, 0.5, 0.5, 1)",
			outline = HOUSE_SELECTION.Current[houseName]
		})
		if HOUSE_SELECTION.Current[houseName] ~= player.color then
			UI.setAttributes("houseHover_" .. houseName .. "_" .. player.color, {
				color = HOUSE_SELECTION.Current[houseName],
				raycastTarget = "False",
				onMouseDown = "",
				onMouseEnter = "HUD_HoverOn",
				onMouseExit = "HUD_HoverOff"
			})
		else
			UI.setAttributes("houseHover_" .. houseName .. "_" .. player.color, {
				color = HOUSE_SELECTION.Current[houseName],
				raycastTarget = "True",
				onMouseDown = "HUD_Click",
				onMouseEnter = "HUD_HoverOn",
				onMouseExit = "HUD_HoverOff"
			})
		end
	else
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. player.color, {
			color = "rgba(0.5, 0.5, 0.5, 1)",
			outline = "Clear"
		})
		UI.setAttributes("houseHover_" .. houseName .. "_" .. player.color, {
			color = "rgba(0, 0, 0, 0)",
			raycastTarget = "True",
			onMouseDown = "HUD_Click",
			onMouseEnter = "HUD_HoverOn",
			onMouseExit = "HUD_HoverOff"
		})
	end
end

function RefreshHouseSelectionHUD(player)
	if player == nil then return U.forEach(HOUSE_SELECTION.UnselectedPlayers, RefreshHouseSelectionHUD) end
	U.forEach(C.Houses, function(houseName) updateHouseHUD(houseName, player) end)
end
-- #endregion

-- #region Primary UI Event Functions
local function toggleXmlElement(elemID)
	log("Toggling " .. elemID)
	if string.lower(UI.getAttribute(elemID, "active")) == "false" then
		UI.setAttribute(elemID, "active", "true")
		UI.setValue("toggleElem_" .. elemID, "▼")
	else
		UI.setAttribute(elemID, "active", "false")
		UI.setValue("toggleElem_" .. elemID, "►")
	end
end
local function promptSimClick(player)
	local players = S.getPlayers()
	local playerOptions = U.map(players, function(pl, i)
		return "#" .. i .. " " .. pl.color .. " (" .. pl.steam_name .. ")"
	end)

	player.showOptionsDialog("Which player is clicking?", playerOptions, 1, function(_, i)
		local targetPlayer = players[i]
		player.showOptionsDialog("Which territory?", C.Houses, 1, function(houseName)
			if houseName == nil then return end
			local clickElemID = "houseHover_" .. houseName .. "_" .. targetPlayer.color
			log("Simulating " .. targetPlayer.color .. " Player clicking '" .. clickElemID .. "'")
			HUD_Click(targetPlayer, "-1", clickElemID)
		end)
	end)
end


function HUD_Click(player, button, id)
	-- log({player = player, button = button, id = id})
	if string.match(id, "^toggleElem_") then
		toggleXmlElement(string.gsub(id, "^toggleElem_", ""))
	elseif id == "advanceGamePhase" then
		DIR.ADVANCE()
	elseif id == "prompt_simClick" then
		promptSimClick(player)
	elseif id == "clearPlayers" then
		P.ClearSeats()
	elseif id == "resetTable" then
		DIR.RESET()
	elseif string.match(id, "^debug_testFunc") then
		id = string.gsub(id, "^debug_testFunc", "") * 1
		TESTFUNCS[id](button, player)
	elseif id == "debug_resetState" then
		S.resetGameState()
		Global.call("UpdatePhaseDisplay")
	elseif id == "debug_resetPlayers" then
		S.resetGameState(true)
		Global.call("UpdatePhaseDisplay")
	elseif id == "debug_setArrows" then
		if button == "-1" then
			L.ShowArrows()
		else
			L.HideArrows()
		end
	elseif string.match(id, "^houseHover_") then
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		local curHouse = U.findIndex(HOUSE_SELECTION.Current, function(col) return col == player.color end)

		if curHouse then HOUSE_SELECTION.Current[curHouse] = nil end
		if houseName ~= curHouse then HOUSE_SELECTION.Current[houseName] = houseColor end

		if curHouse then updateHouseHUD(curHouse) end
		updateHouseHUD(houseName)

		local function areAllHousesSelected()
			for _, player in pairs(HOUSE_SELECTION.UnselectedPlayers) do
				if not U.find(HOUSE_SELECTION.Current, function(pColor) return pColor == player.color end) then
					return false
				end
			end
			return true
		end

		if areAllHousesSelected() then
			DIR.AssignSelectedHouses(HOUSE_SELECTION.Current)
		end
	end
end

function HUD_HoverOn(_, _, id)
	-- log({HoverID = id, player = player, button = button})
	if string.match(id, "^houseHover_") then
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		UI.setAttribute("houseFlag_" .. houseName .. "_" .. houseColor, "color", "White")
		UI.setAttribute(id, "color", "White")
		UI.show("houseInfo_" .. houseName .. "_" .. houseColor)
	end
end

function HUD_HoverOff(_, _, id)
	if string.match(id, "^houseHover_") then
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		if HOUSE_SELECTION.Current[houseName] == nil then
			UI.setAttribute("houseFlag_" .. houseName .. "_" .. houseColor, "color", "rgba(0.5, 0.5, 0.5, 1)")
			UI.setAttribute(id, "color", "rgba(0, 0, 0, 0)")
		end
		UI.hide("houseInfo_" .. houseName .. "_" .. houseColor)
	end
end

function UpdatePhaseDisplay()
	local mode, phase = S.getStateVal("gameMode"), S.getStateVal("gamePhase")
	UI.setValue("currentGameModeDisplay", mode)
	if mode ~= phase then
		UI.setValue("currentGamePhaseDisplay", phase)
		UI.show("currentGamePhaseContainer")
	else
		UI.hide("currentGamePhaseContainer")
	end
	local nextMode, nextPhase = S.getNextPhase()
	UI.setValue("nextGameModeDisplay", nextMode)
	if nextMode ~= nextPhase then
		UI.setValue("nextGamePhaseDisplay", nextPhase)
		UI.show("nextGamePhaseContainer")
	else
		UI.hide("nextGamePhaseContainer")
	end
end
-- #endregion
