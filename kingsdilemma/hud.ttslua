local P = require("kingsdilemma.core.players")
local O = require("kingsdilemma.lib.objects")
local C = require("kingsdilemma.lib.constants")
local U = require("lib.utilities")
local S = require("kingsdilemma.core.state")
local HouseScreen = require("kingsdilemma.objs.p3screen")
local L = require("kingsdilemma.core.lighting")

local TESTFUNCS = {
	function(button)
		if button == "-2" then
			L.SetLightMode("lightLeader", "off")
			L.SetLightMode("lightModerator", "off")
			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, 0)
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, 0)
		else
			local index = {
				U.randBetween(1, #S.getPlayers(), true),
				U.randBetween(1, #S.getPlayers(), true)
			}
			local players = {
				S.getPlayers()[index[1]],
				S.getPlayers()[index[2]]
			}
			L.SetLightMode("lightLeader", "on")
			L.SetLightMode("lightModerator", "on")

			P.RotateToPlayer({
				O.Leader.Figure(),
				O.Leader.Light()
			}, players[1])
			P.RotateToPlayer({
				O.Moderator.Figure(),
				O.Moderator.Light()
			}, players[2])
		end
		-- log({rotatingTo = player})

	end,
	function(_, player)
		local otherColors = U.map(U.filter(S.getPlayers(), function(pl)
			return pl.color ~= player.color
		end), function(pl) return pl.color end)
		log("Simulating clicks on " .. U.join(otherColors, ", "))
		local houses = U.shuffle(U.clone(C.Houses))
		for _, col in pairs(otherColors) do
			local clickElemID = "houseHover_" .. U.shift(houses) .. "_" .. col
			log("Simulating " .. col .. " Player clicking '" .. clickElemID .. "'")
			HUD_Click(Player[col], "-1", clickElemID)
		end
	end,
	function(button)
		local modes = {"ambient", "aye", "nay"}
		local index = U.randBetween(1, 3, true)
		local mode = modes[index]
		local playerNum = U.randBetween(1, #S.getPlayers(), true)

		broadcastToAll("Setting Player " .. playerNum .. "'s Vote Light to '" .. string.upper(mode) .. "'")

		L.SetLightMode("lightVote", mode, playerNum)
	end,
	function(button) end,
	function(button) end,
	function(button) end,
	function(button) end
}

local HouseSelectionState = {}
local UnselectedPlayers = {}

local function isHouseAvailable(houseName)
	return not U.find(U.getValues(S.getPlayerData()), function(pData)
		return pData.house == houseName
	end)
end

function InitHouseSelection()
	U.forEach(S.getPlayers(), function(player)
		if not S.getPlayerVal(player, "house") then
			table.insert(UnselectedPlayers, player)
		end
	end)
	RefreshHouseSelectionHUD()
end

function ConfirmHouseSelection()
	U.forEach(HouseSelectionState, function(color, houseName)
		if not color or not houseName then return end
		UI.hide("houseSelection_" .. color)
		HouseScreen.Spawn(Player[color], houseName)
		S.setPlayerVal(houseName, Player[color], "house")
		S.setPlayerVal(nil, Player[color], "houseName")
	end)
end

local function updateHouseHUD(houseName, player)
	if player == nil then return U.forEach(UnselectedPlayers, function(pl) updateHouseHUD(houseName, pl) end) end
	local color = player.color
	if not U.isIn(player.color, U.map(UnselectedPlayers, function(pl) return pl.color end)) then
		UI.hide("houseSelection_" .. color)
		return
	end
	UI.show("houseSelection_" .. color)
	if not isHouseAvailable(houseName) then
		HouseSelectionState[houseName] = false
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. color, {
			color = "rgba(0.3, 0.3, 0.3, 0.5)",
			outline = "Clear"
		})
		UI.setAttributes("houseHover_" .. houseName .. "_" .. color, {
			color = "rgba(0, 0, 0, 0)",
			raycastTarget = "False",
			onMouseDown = "",
			onMouseEnter = "",
			onMouseExit = "HUD_HoverOff"
		})
	elseif type(HouseSelectionState[houseName]) == "string" then
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. color, {
			color = "rgba(0.5, 0.5, 0.5, 1)",
			outline = HouseSelectionState[houseName]
		})
		if HouseSelectionState[houseName] ~= color then
			UI.setAttributes("houseHover_" .. houseName .. "_" .. color, {
				color = HouseSelectionState[houseName],
				raycastTarget = "False",
				onMouseDown = "",
				onMouseEnter = "",
				onMouseExit = "HUD_HoverOff"
			})
		else
			UI.setAttributes("houseHover_" .. houseName .. "_" .. color, {
				color = HouseSelectionState[houseName],
				raycastTarget = "True",
				onMouseDown = "HUD_Click",
				onMouseEnter = "",
				onMouseExit = "HUD_HoverOff"
			})
		end
	else
		UI.setAttributes("houseFlag_" .. houseName .. "_" .. color, {
			color = "rgba(0.5, 0.5, 0.5, 1)",
			outline = "Clear"
		})
		UI.setAttributes("houseHover_" .. houseName .. "_" .. color, {
			color = "rgba(0, 0, 0, 0)",
			raycastTarget = "True",
			onMouseDown = "HUD_Click",
			onMouseEnter = "HUD_HoverOn",
			onMouseExit = "HUD_HoverOff"
		})
	end
end

function RefreshHouseSelectionHUD(player)
	if player == nil then return U.forEach(UnselectedPlayers, RefreshHouseSelectionHUD) end
	U.forEach(C.Houses, function(houseName) updateHouseHUD(houseName, player) end)
end


local function promptAssignHouse(player)
	local players = S.getPlayers()
	local playerOptions = U.map(players, function(pl, i)
		return "#" .. i .. " " .. pl.color .. " (" .. pl.steam_name .. ")"
	end)

	player.showOptionsDialog("Assign to which player?", playerOptions, 1, function(_, i)
		local targetPlayer = players[i]
		local curHouse = S.getStateVal("playerData", targetPlayer.color).house
		local houseOptions = U.concat({"None"}, U.filter(U.getKeys(C.scanData), function(hName)
			if hName == curHouse then return true end
			local playerData = U.getValues(S.getStateVal("playerData"))
			return not U.isIn(hName, U.map(playerData, function (pData) return pData.house end))
		end))
		player.showOptionsDialog("Which territory?", houseOptions, 1, function(houseName)
			if houseName == "None" then houseName = nil end
			HouseScreen.Spawn(i, houseName, curHouse)
			local playerData = S.getStateVal("playerData", targetPlayer.color)
			if curHouse ~= houseName then
				playerData.houseName = nil
			end
			playerData.house = houseName
			S.setPlayerData(targetPlayer, playerData)
		end)
	end)
end

local function toggleXmlElement(elemID)
	log("Toggling " .. elemID)
	if string.lower(UI.getAttribute(elemID, "active")) == "false" then
		UI.setAttribute(elemID, "active", "true")
		UI.setValue("toggleElem_" .. elemID, "▼")
	else
		UI.setAttribute(elemID, "active", "false")
		UI.setValue("toggleElem_" .. elemID, "►")
	end
end

local function areAllHousesSelected()
	for _, player in pairs(UnselectedPlayers) do
		if not U.find(HouseSelectionState, function(pColor) return pColor == player.color end) then
			return false
		end
	end
	return true
end

local function promptSimClick(player)
	local players = S.getPlayers()
	local playerOptions = U.map(players, function(pl, i)
		return "#" .. i .. " " .. pl.color .. " (" .. pl.steam_name .. ")"
	end)

	player.showOptionsDialog("Which player is clicking?", playerOptions, 1, function(_, i)
		local targetPlayer = players[i]
		player.showOptionsDialog("Which territory?", C.Houses, 1, function(houseName)
			if houseName == nil then return end
			local clickElemID = "houseHover_" .. houseName .. "_" .. targetPlayer.color
			log("Simulating " .. targetPlayer.color .. " Player clicking '" .. clickElemID .. "'")
			HUD_Click(targetPlayer, "-1", clickElemID)
		end)
	end)
end

function HUD_Click(player, button, id)
	log({player = player, button = button, id = id})
	if string.match(id, "^toggleElem_") then
		toggleXmlElement(string.gsub(id, "^toggleElem_", ""))
	elseif id == "prompt_assignHouse" then
		promptAssignHouse(player)
	elseif id == "prompt_simClick" then
		promptSimClick(player)
	elseif string.match(id, "^debug_testFunc") then
		id = string.gsub(id, "^debug_testFunc", "") * 1
		TESTFUNCS[id](button, player)
	elseif id == "debug_resetState" then
		S.resetGameState(true)
	elseif id == "debug_setArrows" then
		if button == "-1" then L.ShowArrows()
		else L.HideArrows() end
	elseif string.match(id, "^houseHover_") then
		local curHouse = U.findIndex(HouseSelectionState, function(col, houseName)
			return col == player.color
		end)
		if curHouse ~= nil then
			HouseSelectionState[curHouse] = nil
			updateHouseHUD(curHouse)
		end
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		HouseSelectionState[houseName] = houseColor
		updateHouseHUD(houseName)
		log({houseSelectionState = JSON.encode_pretty(HouseSelectionState), unselectedPlayers = UnselectedPlayers})
		if areAllHousesSelected() then
			ConfirmHouseSelection()
		end
	end
end


function HUD_HoverOn(_, _, id)
	-- log({HoverID = id, player = player, button = button})
	if string.match(id, "^houseHover_") then
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		UI.setAttribute("houseFlag_" .. houseName .. "_" .. houseColor, "color", "White")
		UI.setAttribute(id, "color", "White")
		UI.show("houseInfo_" .. houseName .. "_" .. houseColor)
	end
end

function HUD_HoverOff(_, _, id)
	if string.match(id, "^houseHover_") then
		local houseName, houseColor = string.match(id, "^houseHover_(.-)_(.-)$")
		if HouseSelectionState[houseName] ~= houseColor then
			UI.setAttribute("houseFlag_" .. houseName .. "_" .. houseColor, "color", "rgba(0.5, 0.5, 0.5, 1)")
			UI.setAttribute(id, "color", "rgba(0, 0, 0, 0)")
		end
		UI.hide("houseInfo_" .. houseName .. "_" .. houseColor)
	end
end