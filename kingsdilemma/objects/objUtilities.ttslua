local U = require("lib.utilities")
local C = require("kingsdilemma.lib.constants")
local O = require("kingsdilemma.lib.objects")
local OU = {}

function OU.foldTransform(objOrTransform, positionDelta, rotationDelta)
	if U.Type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		objOrTransform = objOrTransform.getData().Transform
	end
	if U.Type(objOrTransform) ~= "table" then return end
	if U.Type(objOrTransform.Transform) == "table" then
		objOrTransform = objOrTransform
	end
	objOrTransform = U.clone(objOrTransform)

	if objOrTransform.posX ~= nil then
		if objOrTransform.rotX == nil then
			objOrTransform.rotX = 0
			objOrTransform.rotY = 0
			objOrTransform.rotZ = 0
		end
		if objOrTransform.scaleX == nil then
			objOrTransform.scaleX = 1
			objOrTransform.scaleY = 1
			objOrTransform.scaleZ = 1
		end
		objOrTransform = {
			position = Vector({objOrTransform.posX, objOrTransform.posY, objOrTransform.posZ}),
			rotation = Vector({objOrTransform.rotX, objOrTransform.rotY, objOrTransform.rotZ}),
			scale = Vector({objOrTransform.scaleX, objOrTransform.scaleY, objOrTransform.scaleZ}),
		}
	end

	if U.Type(objOrTransform.position) == "table" then
		if positionDelta ~= nil then
			objOrTransform.position = objOrTransform.position:add(positionDelta)
		end
		if rotationDelta ~= nil then
			objOrTransform.rotation = objOrTransform.rotation:add(rotationDelta)
		end
		return {
			position = Vector(objOrTransform.position),
			rotation = Vector(objOrTransform.rotation or {0, 0, 0}),
			scale = Vector(objOrTransform.scale or {1, 1, 1})
		}
	end
end

function OU.unfoldTransform(objOrTransform, positionDelta, rotationDelta)
	if positionDelta ~= nil or rotationDelta ~= nil then
		objOrTransform = OU.foldTransform(objOrTransform, positionDelta, rotationDelta)
	end
	if U.Type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		return objOrTransform.getData().Transform
	end
	if U.Type(objOrTransform) ~= "table" then return end
	if U.Type(objOrTransform.Transform) == "table" then
		return U.clone(objOrTransform.Transform)
	end

	if objOrTransform.position ~= nil then
		local position = Vector(objOrTransform.position)
		local rotation = Vector(objOrTransform.rotation or {0, 0, 0})
		local scale = Vector(objOrTransform.scale or {1, 1, 1})
		return {
			posX = position.x,
			posY = position.y,
			posZ = position.z,
			rotX = rotation.x,
			rotY = rotation.y,
			rotZ = rotation.z,
			scaleX = scale.x,
			scaleY = scale.y,
			scaleZ = scale.z
		}
	end

	if objOrTransform.posX ~= nil then
		return {
			posX = objOrTransform.posX,
			posY = objOrTransform.posY,
			posZ = objOrTransform.posZ,
			rotX = objOrTransform.rotX or 0,
			rotY = objOrTransform.rotY or 0,
			rotZ = objOrTransform.rotZ or 0,
			scaleX = objOrTransform.scaleX or 1,
			scaleY = objOrTransform.scaleY or 1,
			scaleZ = objOrTransform.scaleZ or 1
		}
	end
end

function OU.SpawnToken(objOrBounds, tokenType, tokenValue, yShift)
	if yShift == nil then yShift = 3 end
	local sourceObj
	if tokenType == "Power" then
		sourceObj = O.SpawnSources["powerToken" .. tokenValue]()
	elseif tokenType == "Coin" then
		sourceObj = O.SpawnSources["coinToken" .. tokenValue]()
	end
	local spawnData = sourceObj.getData()
	spawnData.Value = tokenValue
	spawnData.Transform = OU.unfoldTransform({
		position = U.getScatterPosition(objOrBounds, yShift, 0.6),
		rotation = U.isGameObject(objOrBounds) and objOrBounds.getRotation() or Vector(0, 0, 0),
		scale = sourceObj.getScale()
	})
	spawnData.Tags = {tokenType .. "Token", "Value" .. tokenValue}
	spawnObjectData({
		data = spawnData,
		callback_function = function(obj)
			obj.setLock(false)
		end
	})
	return 0.1
end

function OU.GetTotalValue(zoneOrObjs, tag)
	if type(zoneOrObjs) == "userdata" then return OU.GetTotalValue(zoneOrObjs.getObjects(), tag) end
	if tag ~= nil then zoneOrObjs = U.filter(zoneOrObjs, function(obj) return obj.hasTag(tag) end) end
	local total = 0
	U.forEach(zoneOrObjs, function(obj) total = total + obj.value end)
	return total
end
function OU.GetUpValueData(objs, tag)
	objs = U.filter(objs, function(obj) return obj.hasTag(tag) end)

	local totalValue = OU.GetTotalValue(objs, tag)

	if tag == "CoinToken" then
		return {
			coinToken5 = math.floor(totalValue / 5),
			coinToken1 = totalValue - (5 * math.floor(totalValue / 5))
		}
	elseif tag == "PowerToken" then
		log({
			totalValue = totalValue,
			powerToken10 = math.floor(totalValue / 10),
			powerToken5 = math.floor((totalValue - (10 * math.floor(totalValue / 10))) / 5),
			powerToken1 = totalValue - 5 * math.floor((totalValue - (10 * math.floor(totalValue / 10))) / 5) - 10 * math.floor(totalValue / 10)
		})
		return {
			powerToken10 = math.floor(totalValue / 10),
			powerToken5 = math.floor((totalValue - (10 * math.floor(totalValue / 10))) / 5),
			powerToken1 = totalValue - 5 * math.floor((totalValue - (10 * math.floor(totalValue / 10))) / 5) - 10 * math.floor(totalValue / 10)
		}
	else
		return {}
	end
end
function OU.GetDownValueData(obj)
	if obj.hasTag("CoinToken") then
		if obj.value == 5 then
			return 1, O.SpawnSources.coinToken1(), {"CoinToken", "Value1"}
		end
	elseif obj.hasTag("PowerToken") then
		if obj.value == 10 then
			return 5, O.SpawnSources.powerToken5(), {"PowerToken", "Value5"}
		elseif obj.value == 5 then
			return 1, O.SpawnSources.powerToken1(), {"PowerToken", "Value1"}
		end
	end
	return false, false, false
end

function OU.GetNumObjsByVal(objs, val, tag)
	return #U.filter(objs, function(obj) return obj.hasTag(tag) and obj.value == val end)
end

function OU.GetNumCombinedObjs(objs)
	return {
		power = U.sumVals(OU.GetUpValueData(objs, "PowerToken")),
		coin = U.sumVals(OU.GetUpValueData(objs, "CoinToken"))
	}
end

function OU.GetNumSplitObjs(objs)
	return {
		power = U.sumVals(
			U.map(
				U.filter(objs, function(o) return o.hasTag("PowerToken") end),
				function(pToken) return OU.GetDownValueData(pToken) or 0 end
			)
		),
		coin = U.sumVals(
			U.map(
				U.filter(objs, function(o) return o.hasTag("CoinToken") end),
				function(cToken) return OU.GetDownValueData(cToken) or 0 end
			)
		)
	}
end

function OU.SpawnFromSourceObj(sourceObj, tags, transformData, positionDelta, rotationDelta)
	local spawnData = sourceObj.getData()
	local token
	spawnData.Transform = OU.unfoldTransform(transformData, positionDelta, rotationDelta)
	spawnData.Tags = tags
	spawnObjectData({
		data = spawnData,
		callback_function = function(obj)
			obj.setLock(false)
			token = obj
		end
	})
	return function() return token ~= nil and token.resting and not token.loading_custom end
end
function OU.JumpDestroy(obj, delayTime)
	delayTime = delayTime or 0.5
	obj.setPosition(obj.getPosition():add(Vector(0, 1, 0)))
	obj.addForce(Vector(0, 50, 0), 3)
	Wait.time(function() obj.destruct() end, delayTime)
	return delayTime
end

function OU.TransferObjects(fromZone, toZone, tag, amount)

	local objs = fromZone.getObjects()
	if tag ~= nil then
		objs = U.filter(objs, function(obj) return obj.hasTag(tag) end)
	end
	local toZoneBounds = toZone.getBounds()
	toZoneBounds.size = toZone.getScale()

	amount = amount or #objs

	local function transferObj(obj)
		obj.setPosition(obj.getPosition():add(Vector(0, 1, 0)))
		obj.addForce(Vector(0, 50, 0), 3)
		Wait.time(function()
			obj.setPosition(U.getScatterPosition(toZoneBounds, 2, 0.6))
		end, 0.5)
	end

	local seqFuncs = {}

	for i = 1, amount do
		local obj = U.shift(objs)
		table.insert(seqFuncs, function() transferObj(obj) end)
	end

	U.sequence(seqFuncs, 0.15)
end

function OU.SplitObjByValue(obj)
	local newValue, spawnSource, tags = OU.GetDownValueData(obj)
	if spawnSource == false then return 0 end

	local position = obj.getPosition()

	local seqFuncs = {
		function() OU.JumpDestroy(obj, 0.25) end
	}

	for i = 1, obj.value / newValue do
		table.insert(seqFuncs, function()
			OU.SpawnFromSourceObj(spawnSource, tags, {
				position = U.getScatterPosition(Vector(position), 1, 1),
				rotation = spawnSource.getRotation(),
				scale = spawnSource.getScale()
			})
		end)
	end

	return U.sequence(seqFuncs, 0.15)
end

function OU.CombineObjsByValue(objs)
	local powerObjs = U.filter(objs, function(obj) return obj.hasTag("PowerToken") end)
	local coinObjs = U.filter(objs, function(obj) return obj.hasTag("CoinToken") end)

	local function getAvgCoord(os, coord)
		local coordTotal = 0
		U.forEach(os, function(obj) coordTotal = coordTotal + obj.getPosition()[coord] end)
		return coordTotal / #os
	end

	local position = Vector(getAvgCoord(objs, "x"), getAvgCoord(objs, "y"), getAvgCoord(objs, "z"))
	local spawnDataPower = OU.GetUpValueData(powerObjs, "PowerToken")
	local spawnDataCoin = OU.GetUpValueData(coinObjs, "CoinToken")

	local seqFuncs = {}

	for i = 1, #powerObjs do
		table.insert(seqFuncs, function() OU.JumpDestroy(powerObjs[i], 0.25) end)
	end
	U.iForEach({1, 5, 10}, function(val)
		local spawnDataKey = "powerToken" .. val
		if spawnDataPower[spawnDataKey] == nil then return end
		local spawnSource = O.SpawnSources[spawnDataKey]()
		local tags = {"PowerToken", "Value" .. val}
		for i = 1, spawnDataPower[spawnDataKey] do
			table.insert(seqFuncs, function()
				OU.SpawnFromSourceObj(spawnSource, tags, {
					position = U.getScatterPosition(Vector(position), 1, 1),
					rotation = spawnSource.getRotation(),
					scale = spawnSource.getScale()
				})
			end)
		end
	end)
	for i = 1, #coinObjs do
		table.insert(seqFuncs, function() OU.JumpDestroy(coinObjs[i], 0.25) end)
	end
	U.iForEach({1, 5}, function(val)
		local spawnDataKey = "coinToken" .. val
		if spawnDataCoin[spawnDataKey] == nil then return end
		local spawnSource = O.SpawnSources[spawnDataKey]()
		local tags = {"CoinToken", "Value" .. val}
		for i = 1, spawnDataCoin[spawnDataKey] do
			table.insert(seqFuncs, function()
				OU.SpawnFromSourceObj(spawnSource, tags, {
					position = U.getScatterPosition(Vector(position), 1, 1),
					rotation = spawnSource.getRotation(),
					scale = spawnSource.getScale()
				})
			end)
		end
	end)

	return U.sequence(seqFuncs, 0.15)
end

function OU.TransferValue(fromZone, toZone, amount, tag)
	U.Val("OU.TransferValue", fromZone, U.Type(fromZone) == "userdata" and fromZone.type == "Scripting", "From-zone is not a zone.")
	U.Val("OU.TransferValue", toZones, U.Type(toZone) == "userdata" and toZone.type == "Scripting", "To-zone is not a zone.")
	U.Val("OU.TransferValue", amounts, amount == "ALL" or U.Type(amount) == "number", "Amount must be 'ALL' or a number.")

	local fromJumpFuncs, fromSpawnFuncs = {}, {}

	local fromZoneAmount = amount
	local fromZoneObjs = U.filter(fromZone.getObjects(), function(obj) return obj.hasTag(tag) end)

	for _, val in ipairs({10, 5, 1}) do
		while fromZoneAmount >= val and OU.GetNumObjsByVal(fromZoneObjs, val, tag) > 0 do
			local thisObj = U.pluck(fromZoneObjs, function(obj) return obj.hasTag(tag) and obj.value == val end)
			table.insert(fromJumpFuncs, function() OU.JumpDestroy(thisObj, 0.15) end)
			table.insert(fromSpawnFuncs, function() return OU.SpawnToken(toZone, string.gsub(tag, "Token$", ""), val) end)
			fromZoneAmount = fromZoneAmount - val
		end
	end

	for _, val in ipairs({5, 10}) do
		while fromZoneAmount > 0 and OU.GetNumObjsByVal(fromZoneObjs, val, tag) > 0 do
			local thisObj = U.pluck(fromZoneObjs, function(obj) return obj.hasTag(tag) and obj.value == val end)
			table.insert(fromJumpFuncs, function() OU.JumpDestroy(thisObj, 0.15) end)
			table.insert(fromSpawnFuncs, function() return OU.SpawnToken(toZone, string.gsub(tag, "Token$", ""), val) end)
			fromZoneAmount = fromZoneAmount - val
		end
	end

	for _, val in ipairs({10, 5, 1}) do
		while (-1 * fromZoneAmount) >= val do
			table.insert(fromSpawnFuncs, function() return OU.SpawnToken(fromZone, string.gsub(tag, "Token$", ""), val) end)
			fromZoneAmount = fromZoneAmount + val
		end
	end

	return U.RunSequence({
		function() return U.sequence(fromJumpFuncs, 0.15) end,
		function() return U.sequence(fromSpawnFuncs, 0.25) end,
		function() return 2 end
	})

end

function OU.getAngleOf(objOrTransform)
	local posData = OU.foldTransform(objOrTransform).position
	local zeroPos = Vector(0, 0, C.TableRadius)
	local angle = posData:angle(zeroPos)
	if posData.x < 0 then
		angle = 360 - angle
	end
	return angle
end

function OU.GetNearestAngle(objOrTransform, seatAngles)
	local objAngle = OU.getAngleOf(objOrTransform)
	table.insert(seatAngles, 1, 0)
	local nearestAngle = 1000
	U.forEach(seatAngles, function(pAngle)
		if math.abs(pAngle - objAngle) < math.abs(nearestAngle - objAngle) then
			nearestAngle = pAngle
		end
	end)
	return nearestAngle
end

function OU.RotateByAngle(objOrTransform, angleDelta)
	local objTransform = OU.foldTransform(objOrTransform)
	if objTransform == nil then return end
	return {
		position = Vector(objTransform.position):rotateOver("y", angleDelta),
		rotation = Vector(objTransform.rotation):add(Vector(0, angleDelta, 0)),
		scale = objTransform.scale
	}
end

function OU.GetStepsBetween(startVector, endVector, numSteps)
	-- Vector 5 -> Vector 3, 3 steps.  Distance = 2.  StepSize = Distance/(steps - 1)
	-- Vector 25 -> 20, 6 steps.  Distance = 5. StepSize = Distance/(steps - 1)
	local distVector = Vector(endVector):sub(Vector(startVector))
	local vectorDelta = Vector(distVector):scale(Vector(1/(numSteps - 1), 1/(numSteps - 1), 1/(numSteps - 1)))
	local steps = {}
	local curVector = Vector(startVector)
	while #steps < numSteps do
		table.insert(steps, Vector(curVector))
		curVector:add(Vector(vectorDelta))
	end

	-- log(steps)

	return steps
end

function OU.FindNearestSnapPoint(objOrTransform, obj, includeAll)
	local position = OU.foldTransform(objOrTransform).position

	local snapPoints, unfilteredSnaps
	if obj == nil then
		snapPoints = Global.getSnapPoints()
		unfilteredSnaps = Global.getSnapPoints()
	else
		snapPoints = obj.getSnapPoints()
		unfilteredSnaps = obj.getSnapPoints()
	end

	if U.isGameObject(objOrTransform) then
		local objTags = objOrTransform.getTags()
		snapPoints = U.filter(snapPoints, function(snap)
			-- log(snap)
			-- log({tags = U.join(snap.tags, ", "), objTags = U.join(objOrTransform.getTags(), ", "), hasAnyTags = objOrTransform.hasAnyTags(snap.tags)})
			if #U.getValues(snap.tags) == 0 then return true end
			return U.find(snap.tags, function(tag) return U.isIn(tag, objTags) end)
		end)
	end

	-- log({isGameObject = U.isGameObject(objOrTransform), objOrTransform = U.ToString(objOrTransform), numSnaps = #snapPoints, numUnfiltered = #unfilteredSnaps})

	local snapPositions = U.iMap(snapPoints, function(snap) return obj.positionToWorld(snap.position) end)
	local sortedPositions = U.clone(snapPositions)

	table.sort(sortedPositions, function(a, b) return Vector(a):distance(position) < Vector(b):distance(position) end)

	local distTolerance = 0.25 * (sortedPositions[1]:distance(sortedPositions[2]))

	-- log({sorted = sortedPositions})

	local nearestSnapPos = sortedPositions[1]

	if includeAll then
		return U.findIndex(unfilteredSnaps, function(objSnap)
			local snapPos = obj.positionToWorld(objSnap.position)
			return snapPos:distance(nearestSnapPos) < distTolerance
		end)
	else
		return U.findIndex(snapPoints, function(objSnap)
			local snapPos = obj.positionToWorld(objSnap.position)
			return snapPos:distance(nearestSnapPos) < distTolerance
		end)
	end
end

function OU.SetBoardSnapPoints()
	local board = O.UninteractableObjs.Board()
	local resourceHorizSteps = U.iMap(OU.GetStepsBetween(
		Vector(C.Spots.Board.ResourceTokens.Influence.center.position),
		Vector(C.Spots.Board.ResourceTokens.Knowledge.center.position),
		5
	), function(pos) return pos.x end)
	local cCardHorizSteps = U.iMap(OU.GetStepsBetween(
		Vector(C.Spots.Board.ChronicleStickers.top.position),
		Vector(C.Spots.Board.ChronicleStickers.bottom.position),
		3
	), function(pos) return pos.x end)
	local cCardVertSteps = U.iMap(OU.GetStepsBetween(
		Vector(C.Spots.Board.ChronicleStickers.top.position),
		Vector(C.Spots.Board.ChronicleStickers.bottom.position),
		5
	), function(pos) return pos.z end)

	-- log({horiz = cCardHorizSteps, vert = cCardVertSteps})

	local snapPoints = {}
	U.iForEach(OU.GetStepsBetween(
		C.Spots.Board.StabilityToken.bottom.position,
		C.Spots.Board.StabilityToken.top.position,
		19), function(pos)
			table.insert(snapPoints, {
				position = U.roundVector(board.positionToLocal(pos)),
				rotation = U.roundVector(Vector(C.Spots.Board.StabilityToken.top.rotation):sub(board.getRotation())),
				rotation_snap = true,
				tags = {"StabilityMarker"}
			})
		end)

	U.iForEach(C.Resources, function(resName, i)
		local startPos = Vector(C.Spots.Board.ResourceTokens[resName].bottom.position):setAt("x", resourceHorizSteps[i])
		local endPos = Vector(C.Spots.Board.ResourceTokens[resName].top.position):setAt("x", resourceHorizSteps[i])
		U.iForEach(OU.GetStepsBetween(
			startPos,
			endPos,
			17), function(pos)
				table.insert(snapPoints, {
					position = U.roundVector(board.positionToLocal(pos)),
					rotation = U.roundVector(Vector(C.Spots.Board.ResourceTokens[resName].top.rotation):sub(board.getRotation())),
					rotation_snap = false,
					tags = {resName}
				})
			end)
		end)


	U.iForEach(C.Resources, function(resName, i)
		for j = 1, 3 do
			local pos = Vector(C.Spots.Board.ChronicleStickers.top.position)
			pos.x = cCardHorizSteps[j]
			pos.z = cCardVertSteps[i]

			table.insert(snapPoints, {
				position = U.roundVector(board.positionToLocal(pos)),
				rotation = U.roundVector(Vector(C.Spots.Board.ChronicleStickers.top.rotation):sub(board.getRotation())),
				rotation_snap = true,
				tags = {"ChronicleSticker"}
			})
		end
	end)

	board.setSnapPoints(snapPoints)
	-- log(JSON.encode_pretty(snapPoints))
end

function OU.SetGlobalSnapPoints()

	Global.setSnapPoints({
		{
			position = Vector({9.15, 1.46, 19.00}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 12.81}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 6.61}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 0.41}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -5.78}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -11.98}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -18.17}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"EventCard", "TriggerCard"}
		},
		{
			position = Vector({-7.4, 1.46, 8.05}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, 3.63}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -0.80}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -5.23}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -9.65}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -14.08}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -14.08}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -18.50}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -18.74}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -18.99}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -19.23}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.4, 1.46, -19.47}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		}
	})



end

function OU.FindContainedObjGUID(container, findFunc)
	U.Val("OU.FindContainedObjGUID", container, U.isGameObject(container), "'container' param is not a Game Object")
	U.Val("OU.FindContainedObjGUID", findFunc, U.Type(findFunc) == "function", "'findFunc' param is not a Function")
	local objData = U.find(container.getObjects(), findFunc)
	if objData == nil then return false end
	return objData.guid
end

return OU