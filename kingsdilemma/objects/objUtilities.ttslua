local U = require("lib.utilities")
local C = require("kingsdilemma.lib.constants")
local OU = {}

function OU.foldTransform(objOrTransform)
	if type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		objOrTransform = objOrTransform.getData().Transform
	end
	if type(objOrTransform) ~= "table" then return end
	if type(objOrTransform.Transform) == "table" then
		objOrTransform = objOrTransform
	end
	objOrTransform = U.clone(objOrTransform)

	if objOrTransform.posX ~= nil then
		if objOrTransform.rotX == nil then
			objOrTransform.rotX = 0
			objOrTransform.rotY = 0
			objOrTransform.rotZ = 0
		end
		if objOrTransform.scaleX == nil then
			objOrTransform.scaleX = 1
			objOrTransform.scaleY = 1
			objOrTransform.scaleZ = 1
		end
		objOrTransform = {
			position = {objOrTransform.posX, objOrTransform.posY, objOrTransform.posZ},
			rotation = {objOrTransform.rotX, objOrTransform.rotY, objOrTransform.rotZ},
			scale = {objOrTransform.scaleX, objOrTransform.scaleY, objOrTransform.scaleZ},
		}
	end

	if type(objOrTransform.position) == "table" then
		return {
			position = Vector(objOrTransform.position),
			rotation = Vector(objOrTransform.rotation or {0, 0, 0}),
			scale = Vector(objOrTransform.scale or {1, 1, 1})
		}
	end
end

function OU.unfoldTransform(objOrTransform)
	if type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		return objOrTransform.getData().Transform
	end
	if type(objOrTransform) ~= "table" then return end
	if type(objOrTransform.Transform) == "table" then
		return U.clone(objOrTransform.Transform)
	end

	if objOrTransform.position ~= nil then
		local position = Vector(objOrTransform.position)
		local rotation = Vector(objOrTransform.rotation or {0, 0, 0})
		local scale = Vector(objOrTransform.scale or {1, 1, 1})
		return {
			posX = position.x,
			posY = position.y,
			posZ = position.z,
			rotX = rotation.x,
			rotY = rotation.y,
			rotZ = rotation.z,
			scaleX = scale.x,
			scaleY = scale.y,
			scaleZ = scale.z
		}
	end

	if objOrTransform.posX ~= nil then
		return {
			posX = objOrTransform.posX,
			posY = objOrTransform.posY,
			posZ = objOrTransform.posZ,
			rotX = objOrTransform.rotX or 0,
			rotY = objOrTransform.rotY or 0,
			rotZ = objOrTransform.rotZ or 0,
			scaleX = objOrTransform.scaleX or 1,
			scaleY = objOrTransform.scaleY or 1,
			scaleZ = objOrTransform.scaleZ or 1
		}
	end
end

function OU.getAngleOf(objOrTransform, isExcludingZero)
	local posData = OU.foldTransform(objOrTransform).position
	local zeroPos = Vector(0, 0, C.TableRadius)
	local angle = posData:angle(zeroPos)
	if posData.x < 0 then
		angle = 360 - angle
	end
	return angle
end

function OU.GetNearestPlayerAngle(objOrTransform, isExcludingZero)
	local objAngle = OU.getAngleOf(objOrTransform)
	local playerAngles = U.clone(C.SeatAngles[S.GetSeatCount()])
	if not isExcludingZero then
		table.insert(playerAngles, 1, 0)
	end
	local nearestAngle = 1000
	U.forEach(playerAngles, function(pAngle)
		if math.abs(pAngle - objAngle) < math.abs(nearestAngle - objAngle) then
			nearestAngle = pAngle
		end
	end)
	return nearestAngle
end

function OU.RotateByAngle(objOrTransform, angleDelta)
	local objTransform = OU.foldTransform(objOrTransform)
	if objTransform == nil then return end
	return {
		position = Vector(objTransform.position):rotateOver("y", angleDelta),
		rotation = Vector(objTransform.rotation):add(Vector(0, angleDelta, 0)),
		scale = objTransform.scale
	}
end

function OU.SetGlobalSnapPoints()
	Global.setSnapPoints({
		{
			position = Vector({9.15, 1.46, 19.00}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 12.81}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 6.61}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, 0.41}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -5.78}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -11.98}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"StoryCard"}
		},
		{
			position = Vector({9.15, 1.46, -18.17}),
			rotation = Vector({0, 180, 0}),
			rotation_snap = true,
			tags = {"EventCard", "TriggerCard"}
		},
		{
			position = Vector({-7.75, 1.46, 8.05}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, 3.63}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -0.80}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -5.23}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -9.65}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -14.08}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -14.08}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -18.50}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -18.74}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -18.99}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -19.23}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		},
		{
			position = Vector({-7.75, 1.46, -19.47}),
			rotation = Vector({0, 270, 0}),
			rotation_snap = false,
			tags = {"Dilemma"}
		}
	})



end


return OU