-- local U = require("utilities")
-- local C = require("constants")

local OU = {}

function OU.foldTransform(objOrTransform)
	if type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		objOrTransform = objOrTransform.getData().Transform
	end
	if type(objOrTransform) ~= "table" then return end
	if type(objOrTransform.Transform) == "table" then
		objOrTransform = objOrTransform.Transform
	end

	if objOrTransform.posX ~= nil then
		if objOrTransform.rotX == nil then
			objOrTransform.rotX = 0
			objOrTransform.rotY = 0
			objOrTransform.rotZ = 0
		end
		if objOrTransform.scaleX == nil then
			objOrTransform.scaleX = 1
			objOrTransform.scaleY = 1
			objOrTransform.scaleZ = 1
		end
		objOrTransform = {
			position = {objOrTransform.posX, objOrTransform.posY, objOrTransform.posZ},
			rotation = {objOrTransform.rotX, objOrTransform.rotY, objOrTransform.rotZ},
			scale = {objOrTransform.scaleX, objOrTransform.scaleY, objOrTransform.scaleZ},
		}
	end

	if type(objOrTransform.position) == "table" then
		return {
			position = Vector(objOrTransform.position),
			rotation = Vector(objOrTransform.rotation or {0, 0, 0}),
			scale = Vector(objOrTransform.scale or {1, 1, 1})
		}
	end
end

function OU.unfoldTransform(objOrTransform)
	if type(objOrTransform) == "userdata" and objOrTransform.getData ~= nil then
		return objOrTransform.getData().Transform
	end
	if type(objOrTransform) ~= "table" then return end
	if type(objOrTransform.Transform) == "table" then
		return objOrTransform.Transform
	end

	if objOrTransform.position ~= nil then
		local position = Vector(objOrTransform.position)
		local rotation = Vector(objOrTransform.rotation or {0, 0, 0})
		local scale = Vector(objOrTransform.scale or {1, 1, 1})
		return {
			posX = objOrTransform.posX,
			posY = position.y,
			posZ = position.z,
			rotX = rotation.x,
			rotY = rotation.y,
			rotZ = rotation.z,
			scaleX = scale.x,
			scaleY = scale.y,
			scaleZ = scale.z
		}
	end

	if objOrTransform.posX ~= nil then
		return {
			posX = objOrTransform.posX,
			posY = objOrTransform.posY,
			posZ = objOrTransform.posZ,
			rotX = objOrTransform.rotX or 0,
			rotY = objOrTransform.rotY or 0,
			rotZ = objOrTransform.rotZ or 0,
			scaleX = objOrTransform.scaleX or 1,
			scaleY = objOrTransform.scaleY or 1,
			scaleZ = objOrTransform.scaleZ or 1
		}
	end
end

function OU.GetHandZones()
	return U.filter(getObjects(), function(obj) return obj.type == "Hand" end)
end

function OU.GetPlayerHandZone(player)
	return U.find(OU.GetHandZones(), function(obj) return obj.getGMNotes() == "ZonePlayer" .. S.getPlayerNum(player) end)
end

function OU.GetPlayerFromAngle(objOrTransform)
	local handZoneData = U.concat(
		{{
			playerColor = nil,
			playerNum = 0,
			handPos = Vector(0, 3, 52.7)
		}},
		U.map(OU.GetHandZones(), function(hZone)
			local pColor = hZone.getData().FogColor
			return {
				playerColor = pColor,
				playerNum = S.getPlayerNum(Player[pColor]),
				handPos = hZone.getPosition()
			}
		end)
	)
	-- log({handZoneData = handZoneData})

	local objTransform = OU.foldTransform(objOrTransform)
	-- log({objTransform = objTransform})

	local sortedMinAngles = table.sort(handZoneData, function(a, b)
		return objTransform.position:angle(a.handPos) < objTransform.position:angle(b.handPos)
	end)
	-- log({sortedMinAngles = sortedMinAngles})
	if sortedMinAngles == nil then return end
	local closestHZoneData = sortedMinAngles[1]
	if closestHZoneData.playerNum == 0 then
		return 0
	end
	return Player[closestHZoneData.playerColor]
end

function OU.RotateByAngle(objOrTransform, angleDelta)
	local objTransform = OU.foldTransform(objOrTransform)
	if objTransform == nil then return end
	return {
		position = objTransform.position:rotateOver("y", angleDelta),
		rotation = objTransform.rotation:add(Vector(0, angleDelta, 0)),
		scale = objTransform.scale
	}
end


return OU