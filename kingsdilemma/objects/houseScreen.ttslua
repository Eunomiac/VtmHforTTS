local C = require("kingsdilemma.lib.constants")
local S = require("kingsdilemma.core.state")
local U = require("lib.utilities")

local alphas = {
	global = 1,
	name = 1,
	prestige = 1,
	crave = 1,
	vote = 1,
	score = 1
}
local scales = {
	global = 1,
	name = 1,
	prestige = 1,
	crave = 1,
	vote = 1,
	score = 1
}

local color
function GetColor()
	if color == nil then
		color = U.findColorTag(self)
	end
	return color
end

local player
function GetPlayer()
	if player == nil then
		if GetColor() == nil then return end
		if not U.isPlayer(S.getPlayer(GetColor())) then return end
		player = S.getPlayer(GetColor())
	end
	return player
end

local house
function GetHouse()
	if house == nil then
		if GetPlayer() == nil then return end
		house = S.getPlayerVal(GetPlayer(), "house")
	end
	return house
end

function GetHouseName()return GetPlayer() and S.getPlayerVal(GetPlayer(), "houseName") end
function GetPrestige() return GetPlayer() and S.getPlayerVal(GetPlayer(), "prestige") end
function GetCrave() return GetPlayer() and S.getPlayerVal(GetPlayer(), "crave") end

function SetAlpha(params)
	U.forEach(params, function(alpha, key)
		alphas[key] = alpha
	end)
	UpdateXMLTable()
end

function SetScale(params)
	U.forEach(params, function(scale, key)
		scales[key] = scale
	end)
	UpdateXMLTable()
end


-- local function getHouseCard() return player and getObjectsWithAllTags({"HouseCard", player.color})[1] end


function onLoad()

	if self.hasTag("SourceObj") then return end

	U.waitUntil(function()
		if GetColor() == nil then return end
		if GetPlayer() == nil then return end
		if GetHouse() == nil then return end

		-- log({PLAYER = GetPlayer()})

		U.Val("HouseScreen.onLoad()", self, GetPlayer() and U.isIn(color, Player.getAvailableColors()), "Unable to locate player from color tag '" .. U.ToString(color) .. "'")

		-- DimmerOff()
		UpdateXMLTable()
	end, function()
		return S.ArePlayersSeated() == true
	end)

end

function DimmerOn() SetAlpha({global = 0.05}) end
function DimmerOff() SetAlpha({global = 1}) end
function Update() UpdateXMLTable() end

function Activate()	return self.UI.show("rootPanel") end

local function parseScale(val) return U.join({U.ToString(val), U.ToString(val), U.ToString(val)}, " ") end
local function getRootPanelXML(children)
	return {
			tag = "Panel",
			attributes = {
				id = "rootPanel",
				active = "false",
				showAnimation = "FadeIn",
				hideAnimation = "FadeOut",
				animationDuration = "5",
				height = "400",
				width = "600",
				color = "Clear",
				rotation = "12 0 180",
				position = "0 -100 -100"
			},
			children = children
		 }
end

local function getNamePanelXML()
	local childrenXML = {
		{
			tag = "Text",
			value = GetHouseName() and "house" or C.HousePrefixes[GetHouse()],
			attributes = {
				ignoreLayout = "True",
				rectAlignment = "UpperCenter",
				height = "1500",
				width = "3000",
				offsetXY = GetHouseName() and "0 60" or "0 50",
				color = U.GetHex(GetHouseName() and Color[GetColor()] or Color.Grey, alphas.global * alphas.name * (GetHouseName() and 1 or 0.5)),
				-- outline = U.GetHex(Color.Black, alphas.global * alphas.name),
				-- outlineSize = "15",
				font = "Fonts/CinzelBB",
				fontSize = "200",
				scale = "0.2 0.2 0.2"
			}
		},
		{
			tag = "Text",
			value = string.lower(GetHouseName() or GetHouse()),
			attributes = {
				ignoreLayout = "True",
				rectAlignment = "UpperCenter",
				horizontalOverflow = "Overflow",
				height = "1500",
				width = "3000",
				color = U.GetHex(GetHouseName() and Color[GetColor()] or Color.Grey, alphas.global * alphas.name * (GetHouseName() and 1 or 0.5)),
				outline = U.GetHex(Color.Black, alphas.global * alphas.name),
				outlineSize = "15",
				font = "Fonts/CinzelBB",
				fontSize = "400",
				scale = "0.2 0.2 0.2",
				offsetXY = GetHouseName() and "0 10" or "0 0"
			}
		}
	}

	if GetHouseName() then
		table.insert(childrenXML, {
			tag = "Text",
			value = "of " .. C.HousePrefixes[GetHouse()] .. " " .. GetHouse(),
			attributes = {
				ignoreLayout = "True",
				rectAlignment = "UpperCenter",
				height = "1500",
				width = "3000",
				offsetXY = "0 -25",
				color = U.GetHex(Color[GetColor()]:lerp(C.RootColors.PureBlack, 0), alphas.global * alphas.name),
				-- outline = U.GetHex(Color.Black, alphas.global * alphas.name),
				-- outlineSize = "15",
				font = "Fonts/FrizSC",
				fontSize = "100",
				scale = "0.2 0.2 0.2"
				}
		})
	end

		return {
			tag = "Panel",
			attributes = {
				id = "namePanel",
				visibility = U.join(S.getOtherColors(GetPlayer()), "|"),
				height = "200",
				width = "600",
				color = "Clear",
				position = "0 -10 0",
				pivot = "0.5 0",
				scale = parseScale(scales.global * scales.name * (GetHouseName() and 1 or 0.5))
			},
			children = childrenXML
		}
end

local function getPrestigeCravePanelXML()
	return {
		tag = "Panel",
		attributes = {
			id = "prestigeCravePanel",
			visibility = "",
			height = "50",
			width = "300",
			rectAlignment = "LowerCenter",
			-- offsetXY = "150 0",
			-- scale = "0.75 0.75 0.75",
			color = "Clear"
		},
		children = {
			{
				tag = "Panel",
				attributes = {
					height = "50",
					width = "50",
					rectAlignment = "MiddleLeft",
					pivot = "0 0",
					offsetXY = "0 -25",
					scale = parseScale(scales.global * scales.prestige),
					color = "Clear"
				},
				children = {
					{
						tag = "Image",
						attributes = {
							height = "280",
							width = "350",
							offsetXY = "0 0",
							color = U.GetHex(Color.White, alphas.global * alphas.prestige),
							scale = "0.2 0.2 0.2",
							image = "prestigeIcon-bg"
						},
						children = {}
					},
					{
						tag = "Image",
						attributes = {
							height = "280",
							width = "350",
							offsetXY = "0 0",
							color = U.GetHex(C.RootColors.PureBlack, alphas.global * alphas.prestige),
							scale = "0.2 0.2 0.2",
							image = "prestigeIcon-border"
						},
						children = {}
					},
					{
						tag = "Text",
						value = math.floor(S.getPlayerVal(GetPlayer(), "prestige")),
						attributes = {
							id = "prestigeElem",
							height = "500",
							width = "1000",
							font = "Fonts/FrizB",
							fontSize = "160",
							color = U.GetHex(C.RootColors.PureBlack, alphas.global * alphas.prestige),
							outline = "#000000FF",
							-- outlineSize = "5 -5",
							scale = "0.2 0.2 0.2",
							offsetXY = "0 -6"
						}
					}
				}
			},
			{
				tag = "Panel",
				attributes = {
					height = "50",
					width = "50",
					rectAlignment = "MiddleRight",
					pivot = "1 0",
					offsetXY = "0 -25",
					scale = parseScale(scales.global * scales.crave),
					color = "Clear"
				},
				children = {
					{
						tag = "Image",
						attributes = {
							height = "280",
							width = "350",
							offsetXY = "0 0",
							color = U.GetHex(Color.Black, alphas.global * alphas.prestige),
							scale = "0.2 0.2 0.2",
							image = "craveIcon-bg"
						},
						children = {}
					},
					{
						tag = "Image",
						attributes = {
							height = "280",
							width = "350",
							offsetXY = "0 0",
							color = U.GetHex(Color.Black, alphas.global * alphas.prestige),
							scale = "0.2 0.2 0.2",
							image = "craveIcon-border"
						},
						children = {}
					},
					{
						tag = "Text",
						value = math.floor(S.getPlayerVal(GetPlayer(), "crave")),
						attributes = {
							id = "craveElem",
							height = "500",
							width = "1000",
							font = "Fonts/FrizB",
							fontSize = "160",
							color = U.GetHex(Color.White, alphas.global * alphas.prestige),
							-- outline = "#FFFFFFFF",
							-- outlineSize = "5 -5",
							scale = "0.2 0.2 0.2",
							offsetXY = "0 -8"
						}
					}
				}
			}
		}
	}
end

function UpdateXMLTable()
	if GetPlayer() == nil then return end
	self.UI.setXmlTable({
		getRootPanelXML({
			getNamePanelXML(),
			getPrestigeCravePanelXML()
		})
	})
end