local vals

local function createAll()
	local f_color = {0,0,0,100}

	for i=0,4 do
			-- ranking
			self.createInput({
					value = vals[U.ToString(i*7 + 0)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {-2.08,0.1,-0.18+(i*0.265)},
					width = 100,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- house
			self.createInput({
					value = vals[U.ToString(i*7 + 1)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 2,
					tab = 2,
					position = {-1.1,0.1,-0.18+(i*0.265)},
					width = 800,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- secret agenda
			self.createInput({
					value = vals[U.ToString(i*7 + 2)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {-0.09,0.1,-0.18+(i*0.265)},
					width = 220,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- open agenda
			self.createInput({
					value = vals[U.ToString(i*7 + 3)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {0.42,0.1,-0.18+(i*0.265)},
					width = 220,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- coins
			self.createInput({
					value = vals[U.ToString(i*7 + 4)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {0.94,0.1,-0.18+(i*0.265)},
					width = 220,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- power
			self.createInput({
					value = vals[U.ToString(i*7 + 5)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {1.43,0.1,-0.18+(i*0.265)},
					width = 220,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})

			-- total
			self.createInput({
					value = vals[U.ToString(i*7 + 6)],
					input_function = "SaveInput",
					tooltip="",
					label = "",
					function_owner = self,
					alignment = 3,
					tab = 2,
					validation = 2,
					position = {1.93,0.1,-0.18+(i*0.265)},
					width = 220,
					height = 130,
					font_size = 80,
					scale = {x=1, y=1, z=1},
					font_color = f_color,
					color = {0,0,0,0}
					})
	end

	-- king
	self.createInput({
			value = self.getName(),
			input_function = "SaveName",
			tooltip="",
			label = "",
			function_owner = self,
			alignment = 2,
			tab = 2,
			position = {-0.4,0.1,-0.76},
			width = 1050,
			height = 160,
			font_size = 100,
			scale = {x=1, y=1, z=1},
			font_color = f_color,
			color = {0,0,0,0}
			})

	-- date
	self.createInput({
			value = self.getDescription(),
			input_function = "SaveDescription",
			tooltip="",
			label = "",
			function_owner = self,
			alignment = 2,
			tab = 2,
			position = {1.33,0.1,-0.76},
			width = 600,
			height = 160,
			font_size = 100,
			scale = {x=1, y=1, z=1},
			font_color = f_color,
			color = {0,0,0,0}
			})
end

function onLoad(saved_data)

	if self.hasTag("SourceObj") then return end

	vals = {}
	for i=0,34 do
			vals[U.ToString(i)] = ""
	end

	if saved_data ~= "" then
			vals = JSON.decode(saved_data)
	end

	createAll()
end

local function updateSave()
	vals = {}
	for _,input in pairs(self.getInputs()) do
			if input.index <= 34 then
					vals[U.ToString(input.index)] = U.ToString(input.value)
			end
	end

	for r=1,5 do
			local row_total; row_total = 0
			local is_set = false
			for v=2,5 do
					if tonumber(vals[U.ToString(r*7-v)]) then
							is_set = true
							row_total = row_total + tonumber(vals[U.ToString(r*7-v)])
					end
			end
			if not is_set then
					row_total = ""
			else
					row_total = U.ToString(row_total)
			end
			vals[U.ToString(r*7-1)] = row_total
			self.editInput({index=(r*7-1), value=row_total})
	end

	local pos = {}
	for p=0,4 do
			local v = U.ToString(p*7)
			local t = U.ToString(p*7+6)
			if vals[t] ~= "" then
					local ps = {v, 0}
					ps[2] = tonumber(vals[t])
					table.insert(pos, ps)
			else
					vals[v] = ""
					self.editInput({index=tonumber(v), value=""})
			end
	end

	table.sort(pos, function(a,b) return a[2] > b[2] end)

	local rank = nil
	local last_total = nil
	for k,ps in pairs(pos) do

			if not rank then
					rank = k
					last_total = ps[2]
			end

			if ps[2] < last_total then
					rank = rank + 1
					last_total = ps[2]
			end

			vals[ps[1]] = U.ToString(k)
			self.editInput({index=tonumber(ps[1]), value=U.ToString(rank)})
	end

	--print(JSON.encode(vals))
	local saved_data = JSON.encode(vals)
	self.script_state = saved_data
end

local function removeAll()
	for _,input in pairs(self.getInputs()) do
			self.removeInput(input.index)
	end
	self.setName("")
	self.setDescription("")
end

local function reloadAll()
	removeAll()
	createAll()
	updateSave()
end

function SaveInput(_obj, _player, value, selected)
	updateSave()
end

function SaveName(_obj, _player, value)
	_obj.setName(value)
end

function SaveDescription(_obj, _player, value)
	_obj.setDescription(value)
end


-- #region OLD CODE~

-- local vals = {}

-- local function memoName(name)
-- 	if self.memo == nil then
-- 		self.memo = name .. "@"
-- 		return
-- 	end
-- 	if string.match(self.memo, "@") then
-- 		self.memo = string.gsub(self.memo, "^.*@", name .. "@")
-- 		return
-- 	else
-- 		self.memo = name
-- 		return
-- 	end
-- end

-- local function memoDate(date)
-- 	if self.memo == nil then
-- 		self.memo = "@" .. date
-- 		return
-- 	end
-- 	if string.match(self.memo, "@") then
-- 		self.memo = string.gsub(self.memo, "@.*$", "@" .. date)
-- 		return
-- 	else
-- 		self.memo = "@" .. date
-- 		return
-- 	end
-- end

-- local function getName()
-- 	if self.memo == nil then
-- 		return ""
-- 	end
-- 	if string.match(self.memo, "@") then
-- 		return string.gsub(self.memo, "@.*$", "")
-- 	end
-- 	return self.memo
-- end

-- local function getDate()
-- 	if self.memo == nil then
-- 		return ""
-- 	end
-- 	if string.match(self.memo, "@") then
-- 		return string.gsub(self.memo, "^.*@", "")
-- 	end
-- 	return ""
-- end


-- local function createAll()
-- 	local f_color = { 0, 0, 0, 100 }

-- 	for i = 0, 4 do
-- 		-- ranking
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 0)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { -2.08, 0.1, -0.18 + (i * 0.265) },
-- 			width = 100,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- house
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 1)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 2,
-- 			tab = 2,
-- 			position = { -1.1, 0.1, -0.18 + (i * 0.265) },
-- 			width = 800,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- secret agenda
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 2)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { -0.09, 0.1, -0.18 + (i * 0.265) },
-- 			width = 220,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- open agenda
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 3)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { 0.42, 0.1, -0.18 + (i * 0.265) },
-- 			width = 220,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- coins
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 4)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { 0.94, 0.1, -0.18 + (i * 0.265) },
-- 			width = 220,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- power
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 5)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { 1.43, 0.1, -0.18 + (i * 0.265) },
-- 			width = 220,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})

-- 		-- total
-- 		self.createInput({
-- 			value = vals[U.ToString(i * 7 + 6)],
-- 			input_function = "SaveInput",
-- 			tooltip = "",
-- 			label = "",
-- 			function_owner = self,
-- 			alignment = 3,
-- 			tab = 2,
-- 			validation = 2,
-- 			position = { 1.93, 0.1, -0.18 + (i * 0.265) },
-- 			width = 220,
-- 			height = 130,
-- 			font_size = 80,
-- 			scale = { x = 1, y = 1, z = 1 },
-- 			font_color = f_color,
-- 			color = { 0, 0, 0, 0 }
-- 		})
-- 	end

-- 	-- king
-- 	self.createInput({
-- 		value = getName(),
-- 		input_function = "SaveKing",
-- 		tooltip = "",
-- 		label = "",
-- 		function_owner = self,
-- 		alignment = 2,
-- 		tab = 2,
-- 		position = { -0.4, 0.1, -0.76 },
-- 		width = 1050,
-- 		height = 160,
-- 		font_size = 100,
-- 		scale = { x = 1, y = 1, z = 1 },
-- 		font_color = f_color,
-- 		color = { 0, 0, 0, 0 }
-- 	})

-- 	-- date
-- 	self.createInput({
-- 		value = getDate(),
-- 		input_function = "SaveDate",
-- 		tooltip = "",
-- 		label = "",
-- 		function_owner = self,
-- 		alignment = 2,
-- 		tab = 2,
-- 		position = { 1, 0.1, -0.72 },
-- 		width = 600,
-- 		height = 160,
-- 		font_size = 100,
-- 		scale = { x = 1, y = 1, z = 1 },
-- 		font_color = f_color,
-- 		color = { 0, 0, 0, 0 }
-- 	})
-- end


-- function onLoad(saved_data)
-- 	if self.memo == nil then self.memo = "@" end
-- 	vals = {}
-- 	for i = 0, 34 do
-- 		vals[U.ToString(i)] = ""
-- 	end

-- 	if saved_data ~= "" then
-- 		vals = JSON.decode(saved_data)
-- 	end

-- 	createAll()
-- end

-- local function updateSave()
-- 	vals = {}
-- 	for _, input in pairs(self.getInputs()) do
-- 		if input.index <= 34 then
-- 			vals[U.ToString(input.index)] = U.ToString(input.value)
-- 		end
-- 	end

-- 	for r = 1, 5 do
-- 		local row_total = "0"
-- 		local is_set = false
-- 		for v = 2, 5 do
-- 			if tonumber(vals[U.ToString(r * 7 - v)]) then
-- 				is_set = true
-- 				row_total = U.ToString(row_total + tonumber(vals[U.ToString(r * 7 - v)]))
-- 			end
-- 		end
-- 		if not is_set then
-- 			row_total = ""
-- 		else
-- 			row_total = U.ToString(row_total)
-- 		end
-- 		vals[U.ToString(r * 7 - 1)] = row_total
-- 		self.editInput({ index = (r * 7 - 1), value = row_total })
-- 	end

-- 	local pos = {}
-- 	for p = 0, 4 do
-- 		local v = U.ToString(p * 7)
-- 		local t = U.ToString(p * 7 + 6)
-- 		if vals[t] ~= "" then
-- 			local ps = { v, 0 }
-- 			ps[2] = tonumber(vals[t])
-- 			table.insert(pos, ps)
-- 		else
-- 			vals[v] = ""
-- 			self.editInput({ index = tonumber(v), value = "" })
-- 		end
-- 	end
-- 	table.sort(pos, function(a, b)
-- 		return a[2] > b[2]
-- 	end)

-- 	local rank = nil
-- 	local last_total = nil
-- 	for k, ps in pairs(pos) do
-- 		if not rank then
-- 			rank = k
-- 			last_total = ps[2]
-- 		end

-- 		if ps[2] < last_total then
-- 			rank = rank + 1
-- 			last_total = ps[2]
-- 		end

-- 		vals[ps[1]] = U.ToString(k)
-- 		self.editInput({ index = tonumber(ps[1]), value = U.ToString(rank) })
-- 	end

-- 	--print(JSON.encode(vals))
-- 	self.script_state = JSON.encode(vals)
-- end

-- local function removeAll()
-- 	for _, input in pairs(self.getInputs()) do
-- 		self.removeInput(input.index)
-- 	end
-- 	self.setName("")
-- 	self.setDescription("")
-- end

-- local function reloadAll()
-- 	removeAll()
-- 	createAll()
-- 	updateSave()
-- end

-- function SaveInput(_obj, _player, value, selected)
-- 	updateSave()
-- end

-- function SaveKing(_obj, _player, value)
-- 	memoName(value)
-- end

-- function SaveDate(_obj, _player, value)
-- 	memoDate(value)
-- end

-- #endregion
