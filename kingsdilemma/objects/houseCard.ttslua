local C = require("kingsdilemma.lib.constants")
local P = require("kingsdilemma.core.players")
local S = require("kingsdilemma.core.state")

local hideButtonBack = true

local thick = 0.12
local gx, gy -- Global Offsets for calibrating against scan error

local scanData, buttons, inputs
local houseTitle, houseName, houseNum

local function createTextField(name)
	local player = S.getPlayerOf(self)
	if player == nil then return end
	self.UI.setXmlTable({
		{
			tag = "InputField",
			value = name,
			attributes = {
				visibility = player.color,
				onEndEdit = "editTextField",
				color = "Clear",
				placeholder = " ",
				textColor = "#000000",
				font = "Fonts/Script2",
				fontSize = "100",
				width = "500",
				height = "200",
				rectAlignment = "MiddleCenter",
				alignment = "MiddleLeft",
				position = "13 -79 -15",
				rotation = "0 0 180",
				scale = "0.15 0.15 0.15"
			}
		}
	})

end

local function initButtonsTable()
	buttons = {}
	inputs = {}
	buttons.count = 0

	buttons.counter = {
		width = 0,
		height = 0,
		font = 800,
		ox = 0.08,
		oz = -0.08,
		ow = 300,
		oh = 300
	}
	buttons.toggleA = {
		width = 300, height = 300, font = 400
	}
	buttons.toggleB = {
		width = 300, height = 300, font = 400
	}
	buttons.txt = {
		width = scanData.textWidth, height = 500, font = 350, alignment = 3
	}
	buttons.editBox = {
		width = 3800, height = 3600, font = 250, alignment = 2
	}
end

local function forceSave()
	local data_to_save = { buttons = {}, inputs = {} }
	for i, v in pairs(buttons) do
		if i ~= "count" then
			if v.label == "\u{2717}" then
				data_to_save.buttons[i] = "u{2717}"
			else
				data_to_save.buttons[i] = v.label
			end
		end
	end
	local inputs = self.getInputs()
	for _, v in pairs(inputs) do
		data_to_save.inputs[v.label] = v.value
	end
	local saved_data = JSON.encode_pretty(data_to_save)
	self.script_state = saved_data
	return saved_data
end

local function add(name, amount, alt_click)
	if alt_click then amount = amount * 10 end
	buttons[name].label = tostring(tonumber(buttons[name].label) + amount)
	self.editButton(buttons[name])
	forceSave()
end

local function createpm(name, type, x, z)
	local button_parameters = {}
	button_parameters.index = buttons.count
	button_parameters.height = buttons[type].oh
	button_parameters.width = buttons[type].ow
	button_parameters.font_size = buttons[type].font * 0.7
	self.setVar("add_" .. name, function(obj, color, alt_click) add(name, 1, alt_click) end)
	button_parameters.click_function = "add_" .. name
	button_parameters.label = "+"
	button_parameters.function_owner = self
	button_parameters.scale = { 0.1, 0.1, 0.1 }
	if hideButtonBack then
		button_parameters.color = { 1, 1, 1, 0 }
		button_parameters.font_color = { 0, 0, 0, 100 }
	end
	button_parameters.position = { x + buttons[type].ox, thick, z + buttons[type].oz }
	self.createButton(button_parameters)
	buttons["p_" .. name] = button_parameters
	buttons.count = buttons.count + 1

	button_parameters.index = buttons.count
	self.setVar("sub_" .. name, function(obj, color, alt_click) add(name, -1, alt_click) end)
	button_parameters.click_function = "sub_" .. name
	button_parameters.label = "-"
	button_parameters.position = { x - buttons[type].ox, thick, z + buttons[type].oz }
	self.createButton(button_parameters)
	buttons["m_" .. name] = button_parameters
	buttons.count = buttons.count + 1
end

local function clickedToggle(index)
	if buttons[index].label == "" then
		buttons[index].label = "\u{2717}"
	else
		buttons[index].label = ""
	end
	self.editButton(buttons[index])
	forceSave()
end

local function setupButton(name, type, x, z)
	local button_parameters = {}
	button_parameters.index = buttons.count
	button_parameters.height = buttons[type].height
	button_parameters.width = buttons[type].width
	button_parameters.font_size = buttons[type].font
	if type == "counter" then
		button_parameters.click_function = "Dud"
		button_parameters.label = "0"
		createpm(name, type, gx + x, gy + z)
		button_parameters.index = buttons.count
	elseif type == "toggleA" or type == "toggleB" then
		self.setVar("toggleClick_" .. name, function() clickedToggle(name) end)
		button_parameters.click_function = "toggleClick_" .. name
		button_parameters.label = ""
	else
		button_parameters.click_function = "Dud"
		button_parameters.label = "0"
	end

	if hideButtonBack then
		button_parameters.color = { 1, 1, 1, 0 }
		button_parameters.font_color = { 0, 0, 0, 100 }
	end
	button_parameters.scale = { 0.1, 0.1, 0.1 }
	button_parameters.position = { gx + x, thick, gy + z }
	button_parameters.function_owner = self

	if buttons[name] ~= nil then
		if buttons[name].label == "u{2717}" then
			button_parameters.label = "\u{2717}"
		else
			button_parameters.label = buttons[name].label
		end
	end

	self.createButton(button_parameters)
	buttons[name] = button_parameters
	buttons.count = buttons.count + 1
end

local function initCustomButtons()
	local player = S.getPlayerOf(self)
	local houseName = S.getPlayerVal(player, "houseName") or ""
	createTextField(houseName)

	-- prestige tracker. Potentially worth simplifying the on_click to fill up to clicked square, rather than 1 by 1.
	local dx = -2.05;
	local dy = -0.545;
	local p_unit = 0.069;
	local number = 0
	for i = 0, 9 do
		for j = 0, 11 do
			setupButton(string.format('prestige%d_%d', i, j), "toggleB",
				dx + i * p_unit + (i > 4 and scanData.prestigeGap or 0),
				dy + j * p_unit)
			number = number + 1
		end
	end

	-- crave tracker.
	dy = 0.41
	number = 0
	for i = 0, 9 do
		for j = 0, 5 do
			setupButton('crave' .. number, "toggleB", dx + i * p_unit + (i > 4 and scanData.prestigeGap or 0), dy + j * p_unit)
			number = number + 1
		end
	end

	-- agenda trackers
	dx = -0.63
	dy = 0.728
	for i = 0, 7 do
		for j = 0, 2 do
			setupButton(string.format('agenda%d_%d', i, j), "toggleB", dx + i * 0.072 + (i > 3 and scanData.agendaGap or 0),
				dy + 0.105 * j)
		end
	end

	-- achievement trackers
	dx = scanData.achievementButtons.offsets.dx;
	dy = scanData.achievementButtons.offsets.dy;
	local zStart = scanData.achievementButtons.offsets.zStart;

	-- narrative
	setupButton('achievement1', 'toggleB', dx, zStart + dy)
	local rowNum = 2
	for _, bData in ipairs(scanData.achievementButtons.blocks) do
		local numButtons = bData.num
		local zFix = bData.zFix
		local zScale = bData.zScale
		for j = 0, numButtons do
			setupButton("achievement" .. rowNum + j, "toggleB", dx, zFix + dy + (zScale * j))
		end
		rowNum = rowNum + numButtons + 1
	end
end

function onLoad(saved_data)
	-- Wait.time(function()
		houseTitle = string.gsub(self.getName(), "^(.*) of.*$", "%1s")
		houseName = string.gsub(self.getName(), "^.*of ", "")
		houseNum = string.gsub(self.getDescription(), ".-(%d+)", "%1") * 1
		scanData = C.scanData[houseName]

		-- log("The " .. houseTitle .. " of " .. houseName .. " is #" .. houseNum)

		if scanData == nil then
			return error("[House Card] Error: '" .. houseName .. "' is not a recognized House.")
		end

		gx = scanData.globalOffsets.gx
		gy = scanData.globalOffsets.gy

		initButtonsTable()

		local loaded_data = JSON.decode(saved_data)
		if loaded_data ~= nil then
			for i, v in pairs(loaded_data.buttons) do
				buttons[i] = { label = v }
			end
			for i, v in pairs(loaded_data.inputs) do
				inputs[i] = v
			end
		end
		initCustomButtons()
	-- end, 1)
end

function Dud() return end

editTextField = P.setPlayerHouseName