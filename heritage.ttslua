require("vscode/console")
local M = require("core.main")
local U = require("lib.utilities")
local C = require("lib.constants")
local S = require("core.state")
local G = require("lib.guids")
local Z = require("core.zones")

gameState = {}

function HUD_testFunc1(player, value, id)
	-- local changePad = getObjectFromGUID("bd8cd5")
	-- local changeObj = U.filter(U.findAboveObject(changePad), function(obj) return obj.getPosition().y > changePad.getPosition().y end)[1]

	M.processContainer(getObjectFromGUID("bcd555"), "asset")
	M.processContainer(getObjectFromGUID("1df0c9"), "asset")

	-- M.processContainer(getObjectFromGUID(G.playerObjs.Red.pouch), "mission")

	-- Wait.time(function() U.forEach(C.Colors, function(color)
	-- 	M.processContainer(getObjectFromGUID(G.playerObjs[color].haven))
	-- 	M.processContainer(getObjectFromGUID(G.playerObjs[color].pouch))
	-- end) end, 2)

	-- local chapterObj = getObjectFromGUID(G.playerObjs.Red.haven)
	-- M.processContainer(chapterObj, "chapter")
	-- local missionObj = getObjectFromGUID(G.playerObjs.Yellow.pouch)
	-- M.processContainer(missionObj, "mission")
	-- local chapterObj = getObjectFromGUID(G.playerObjs.Yellow.haven)
	-- M.processContainer(chapterObj, "chapter")
	-- local missionObj = getObjectFromGUID(G.playerObjs.Blue.pouch)
	-- M.processContainer(missionObj, "mission")
	-- local chapterObj = getObjectFromGUID(G.playerObjs.Blue.haven)
	-- M.processContainer(chapterObj, "chapter")
end
function HUD_testFunc2(player, value, id)
	local zones = U.map(G.zones.allPlayer, function(uid) return getObjectFromGUID(uid) end)
	local tags = {
		ClanLeader = {"Ankh", "Boon", "Power", "ClanLeader", "ExhaustTorpor"},
		Character = {"Ankh", "Boon", "Power", "Infamy", "Character", "ExhaustTorpor"}
	}
	for _, zone in pairs(zones) do
		if U.isIn(zone.guid, {G.zones.Red.bloodline[1][1], G.zones.Yellow.bloodline[1][1], G.zones.Blue.bloodline[1][1]}) then
			if value == "-2" then
				for _, tag in pairs(tags.ClanLeader) do zone.removeTag(tag) end
			else
				for _, tag in pairs(tags.ClanLeader) do zone.addTag(tag) end
			end
		else
			if value == "-2" then
				for _, tag in pairs(tags.Character) do zone.removeTag(tag) end
			else
				for _, tag in pairs(tags.Character) do zone.addTag(tag) end
			end
		end
	end

end
function HUD_testFunc3(player, value, id)
	U.forEach(G.zones.allPlayer,
		function(zoneGUID)
			local zone = getObjectFromGUID(zoneGUID)
			zone.addTag("ClanScheme")
		end)
end

function onLoad(script_state)
	M.onLoad(script_state)
	Z.onLoad()

	U.forEach(U.flatten(G.highlighters),
		function(objID)
			getObjectFromGUID(objID).tooltip = false
		end)

	Wait.time(function()
		onObjectEnterZone = M.onObjectEnterZone
		onObjectLeaveZone = Z.onObjectLeaveZone
		onPlayerTurn = M.onPlayerTurn
		tryObjectEnterContainer = M.tryObjectEnterContainer
	end, 0.5)
end

function onUpdate() console.update() end

function onSave() return JSON.encode(gameState) end

function HUD_refreshUI() M.refresh() end

function HUD_resetGameState() S.resetGameState() end
function HUD_setChapterStandings() M.askLastChapterStandings() end
function HUD_setChapterData() M.askChapterData() end

function HUD_debugCardZoom() M.zoomCard(Player.Red) end
function HUD_debugClearZoom() M.clearZoom(Player.Red) end

function HUD_checkSuspicion(player, value)
  if (value == "-2") then
    Z.hideSuspicion()
		getObjectFromGUID(G.battlegrounds.d).call("EndTrial")
  else
    Z.showSuspicion()
  end
end
function HUD_setupGame() M.gameSETUP() end
function HUD_initGame() M.gameINIT() end
function HUD_startGame() M.gameSTART() end
function HUD_scoreGame() M.gameSCORE() end
function HUD_missionsGame() M.gameMISSIONS() end
function HUD_afterGame() M.gameAFTERMATH() end
function HUD_endGame() M.gameEND() end

function HUD_toggleZones(player, value, id)
	if value == "-2" then
		Z.hideZones()
	else
		Z.activateZones()
	end
end

function HUD_toggleHavens(player, value, id)
	if value == "-2" then
		M.hideHavens()
	else
		M.showHavens()
	end
end
function HUD_togglePouches(player, value, id)
	if value == "-2" then
		M.hidePouches()
	else
		M.showPouches()
	end
end

function HUD_showTraits(player, value)
  if (value == "-2") then
      for _, color in pairs(C.Colors) do
        M.hideUpdatedTraits(color)
      end
  else
  for _, color in pairs(C.Colors) do
    M.showUpdatedTraits(color)
  end
end
end
function HUD_updateTraits() M.askTraitsUpdate() end


function HUD_processCharacterDeck()
	local charDeck =  U.findAboveObject(getObjectFromGUID(G.decks.characterSpot), "Deck")[1]
  if not charDeck then return false end
	M.processDeck(charDeck, "character")
end

local truePos = {x = -3.67, y = 4, z = -2.14}
local falsePos = {x = 3.81, y = 4, z = -2.22}

function HUD_sortCharacterDeck()
	local charDeck =  U.findAboveObject(getObjectFromGUID(G.decks.characterSpot), "Deck")[1]
  if not charDeck then return false end
	local stagingPos = charDeck.getPosition()
	stagingPos.y = stagingPos.y + 4

	truePos.y = 4
	falsePos.y = 4
	local function sortCard(card, sortFunc)
		if sortFunc == nil then sortFunc = function() return true end end

		if sortFunc() then
			card.setPositionSmooth(truePos)
			card.setRotationSmooth({x = 0, y = 180, z = 0})
			truePos.y = truePos.y + 0.2
		else
			card.setPositionSmooth(falsePos)
			card.setRotationSmooth({x = 0, y = 180, z = 0})
			falsePos.y = falsePos.y + 0.2
		end
	end
	local function grabCard(card)
		if card == nil then
			charDeck.takeObject({
				position = stagingPos,
				smooth = false,
				callback_function = function(card)
					sortCard(card, function() return card.getDecals() ~= nil end)
					if charDeck.remainder then
						grabCard(charDeck.remainder)
					else
						grabCard()
					end
				end
			})
		else
			sortCard(card, function() return card.getDecals() ~= nil end)
		end
	end
	grabCard()
end

function HUD_toggleDebug()
	local debugStatePanel = UI.getAttribute("debugStatePanel", "active") == "False" or UI.getAttribute("debugStatePanel", "active") == "false"

	UI.setAttribute("debugStatePanel", "active", debugStatePanel)
	UI.setAttribute("debugControls", "active", debugStatePanel)
end

function HUD_toggleTraits()
  if (UI.getAttribute("debugStatePanel", "active") == "False" or UI.getAttribute("debugStatePanel", "active") == "false") then return end
  local debugTraitsPanel = UI.getAttribute("debugTraitsPanel", "active") == "False" or UI.getAttribute("debugTraitsPanel", "active") == "false"
  UI.setAttribute("debugTraitsPanel", "active", debugTraitsPanel)
end

function HUD_toggleScores(player, value)
  if (value == "-2") then
		Z.hideScores()
	else
		Z.showScores()
	end
end

function HUD_askRoundAndTurn()
	M.askRoundAndTurn()
end
function HUD_debugEndGame()
	M.setRoundAndTurn(9, 3)
	M.advanceTurn()
end




function HUD_show(player, value, id)
  local imageID = string.gsub(id, "hud", "")

  -- Get value of toggle element to see if it's currently toggled on
  local curVal = UI.getValue(id)
  if (UI.getValue(id) == "ON") then
    UI.setValue(id, "")
    UI.hide(imageID)
    UI.setAttribute(id .. "Overlay", "color", "clear")
    return
  end
  -- Check mouse key: If it's right-clicked, keep it open.
  if (value == "-2") then
    UI.setValue(id, "ON")
  end
  UI.show(imageID)
end
function HUD_hide(player, value, id)
  if (UI.getValue(id) ~= "ON") then
    UI.hide(string.gsub(id, "hud", ""))
  end
end
function HUD_highlight(player, value, id)
    local overlayID = id .. "Overlay"
    UI.setAttribute(overlayID, "color", "#FFFFFF")
end
function HUD_dim(player, value, id)
  if (UI.getValue(id) ~= "ON") then
    local overlayID = id .. "Overlay"
    UI.setAttribute(overlayID, "color", "clear")
  end
end

function HUD_cameraSet(player, value, id)
  local zoomTarget = string.gsub(id, "camera", "")
  if (value == "-2" and C.CameraAngles[zoomTarget .. "Wide"]) then
    M.setCamera(player, zoomTarget .. "Wide")
  else
    M.setCamera(player, zoomTarget)
  end
end
